{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamlal/Desktop/verification/src/components/VerifyCertificate/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./index.css\";\nimport VerifyCertificateImg from \"../../assets/img/verify-certificate.png\";\nimport SampleCertificateImg from \"../../assets/img/sample_ceritificate.png\";\nimport ValidCertificateImg from \"../../assets/img/ValidCertificate.png\";\nimport InvalidCertificateImg from \"../../assets/img/InvalidCertificate.jpeg\";\nimport QRCodeImg from \"../../assets/img/qr-code.svg\";\nimport { CertificateStatus } from \"../CertificateStatus\";\nimport { CustomButton } from \"../CustomButton\";\nimport QRScanner from \"../QRScanner\";\nimport JSZip from \"jszip\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CERTIFICATE_FILE = \"certificate.json\";\nexport const VerifyCertificate = () => {\n  _s();\n\n  const [result, setResult] = useState(\"\");\n  const [showScanner, setShowScanner] = useState(false);\n\n  const handleScan = data => {\n    if (data) {\n      const zip = new JSZip();\n      zip.loadAsync(data).then(contents => {\n        return contents.files[CERTIFICATE_FILE].async('text');\n      }).then(function (contents) {\n        setResult(contents);\n      }).catch(err => {\n        setResult(data);\n      });\n    }\n  };\n\n  const handleError = err => {\n    console.error(err);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid verify-certificate-wrapper\",\n    children: [!result && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [!showScanner && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: VerifyCertificateImg,\n          className: \"banner-img\",\n          alt: \"banner-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center\",\n          children: \"Verify a vaccination certificate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          className: \"green-btn\",\n          onClick: () => setShowScanner(true),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Scan QR code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"ml-3\",\n            src: QRCodeImg,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), showScanner && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(QRScanner, {\n          onError: handleError,\n          onScan: handleScan\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          className: \"green-btn\",\n          onClick: () => setShowScanner(false),\n          children: \"BACK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true), result && /*#__PURE__*/_jsxDEV(CertificateStatus, {\n      certificateData: result,\n      goBack: () => {\n        setShowScanner(false);\n        setResult(\"\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(VerifyCertificate, \"jTQh/kjt6yT2O2Ci/YV1YX/n9tk=\");\n\n_c = VerifyCertificate;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerifyCertificate\");","map":{"version":3,"sources":["/Users/shubhamlal/Desktop/verification/src/components/VerifyCertificate/index.js"],"names":["React","useState","VerifyCertificateImg","SampleCertificateImg","ValidCertificateImg","InvalidCertificateImg","CertificateStatus","CustomButton","QRScanner","JSZip","Container","Row","Col","CERTIFICATE_FILE","VerifyCertificate","result","setResult","showScanner","setShowScanner","handleScan","data","zip","loadAsync","then","contents","files","async","catch","err","handleError","console","error","QRCodeImg"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,aAAP;AACA,OAAOC,oBAAP,MAAiC,yCAAjC;AACA,OAAOC,oBAAP,MAAiC,0CAAjC;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,qBAAP,MAAkC,0CAAlC;;AAEA,SAAQC,iBAAR,QAAgC,sBAAhC;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;;;AACA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AACnC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,KAAD,CAA9C;;AACA,QAAMkB,UAAU,GAAGC,IAAI,IAAI;AACvB,QAAIA,IAAJ,EAAU;AACN,YAAMC,GAAG,GAAG,IAAIZ,KAAJ,EAAZ;AACAY,MAAAA,GAAG,CAACC,SAAJ,CAAcF,IAAd,EAAoBG,IAApB,CAA0BC,QAAD,IAAc;AACnC,eAAOA,QAAQ,CAACC,KAAT,CAAeZ,gBAAf,EAAiCa,KAAjC,CAAuC,MAAvC,CAAP;AACH,OAFD,EAEGH,IAFH,CAEQ,UAAUC,QAAV,EAAoB;AACxBR,QAAAA,SAAS,CAACQ,QAAD,CAAT;AACH,OAJD,EAIGG,KAJH,CAISC,GAAG,IAAI;AACRZ,QAAAA,SAAS,CAACI,IAAD,CAAT;AACH,OANL;AASH;AACJ,GAbD;;AAcA,QAAMS,WAAW,GAAGD,GAAG,IAAI;AACvBE,IAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACH,GAFD;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,4CAAf;AAAA,eAEQ,CAACb,MAAD,iBACA;AAAA,iBACK,CAACE,WAAD,iBACD;AAAA,gCACI;AAAK,UAAA,GAAG,EAAEf,oBAAV;AAAgC,UAAA,SAAS,EAAC,YAA1C;AAAuD,UAAA,GAAG,EAAC;AAA3D;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,YAAD;AAAc,UAAA,SAAS,EAAC,WAAxB;AAAoC,UAAA,OAAO,EAAE,MAAMgB,cAAc,CAAC,IAAD,CAAjE;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,MAAf;AAAsB,YAAA,GAAG,EAAEc,SAA3B;AAAsC,YAAA,GAAG,EAAE;AAA3C;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA,sBAFJ,EAUKf,WAAW,iBACZ;AAAA,gCACI,QAAC,SAAD;AAAW,UAAA,OAAO,EAAEY,WAApB;AACW,UAAA,MAAM,EAAEV;AADnB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAGI,QAAC,YAAD;AAAc,UAAA,SAAS,EAAC,WAAxB;AAAoC,UAAA,OAAO,EAAE,MAAMD,cAAc,CAAC,KAAD,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA,sBAXJ;AAAA,oBAHR,EAuBQH,MAAM,iBAAI,QAAC,iBAAD;AAAmB,MAAA,eAAe,EAAEA,MAApC;AAA4C,MAAA,MAAM,EAAE,MAAM;AAChEG,QAAAA,cAAc,CAAC,KAAD,CAAd;AACAF,QAAAA,SAAS,CAAC,EAAD,CAAT;AACH;AAHS;AAAA;AAAA;AAAA;AAAA,YAvBlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkCH,CAtDM;;GAAMF,iB;;KAAAA,iB","sourcesContent":["import React, {useState} from \"react\";\nimport \"./index.css\";\nimport VerifyCertificateImg from \"../../assets/img/verify-certificate.png\"\nimport SampleCertificateImg from \"../../assets/img/sample_ceritificate.png\"\nimport ValidCertificateImg from \"../../assets/img/ValidCertificate.png\"\nimport InvalidCertificateImg from \"../../assets/img/InvalidCertificate.jpeg\"\nimport QRCodeImg from \"../../assets/img/qr-code.svg\"\nimport {CertificateStatus} from \"../CertificateStatus\";\nimport {CustomButton} from \"../CustomButton\";\nimport QRScanner from \"../QRScanner\";\nimport JSZip from \"jszip\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nexport const CERTIFICATE_FILE = \"certificate.json\";\n\nexport const VerifyCertificate = () => {\n    const [result, setResult] = useState(\"\");\n    const [showScanner, setShowScanner] = useState(false);\n    const handleScan = data => {\n        if (data) {\n            const zip = new JSZip();\n            zip.loadAsync(data).then((contents) => {\n                return contents.files[CERTIFICATE_FILE].async('text')\n            }).then(function (contents) {\n                setResult(contents)\n            }).catch(err => {\n                    setResult(data)\n                }\n            );\n\n        }\n    };\n    const handleError = err => {\n        console.error(err)\n    };\n    return (\n        <div className=\"container-fluid verify-certificate-wrapper\">\n            {\n                !result &&\n                <>\n                    {!showScanner &&\n                    <>\n                        <img src={VerifyCertificateImg} className=\"banner-img\" alt=\"banner-img\"/>\n                        <h3 className=\"text-center\">Verify a vaccination certificate</h3>\n                        <CustomButton className=\"green-btn\" onClick={() => setShowScanner(true)}>\n                            <span>Scan QR code</span>\n                            <img className=\"ml-3\" src={QRCodeImg} alt={\"\"}/>\n                        </CustomButton>\n                    </>}\n                    {showScanner &&\n                    <>\n                        <QRScanner onError={handleError}\n                                   onScan={handleScan}/>\n                        <CustomButton className=\"green-btn\" onClick={() => setShowScanner(false)}>BACK</CustomButton>\n                    </>\n                    }\n                </>\n            }\n            {\n                result && <CertificateStatus certificateData={result} goBack={() => {\n                    setShowScanner(false);\n                    setResult(\"\");\n                }\n                }/>\n            }\n\n\n        </div>\n    )\n};\n"]},"metadata":{},"sourceType":"module"}