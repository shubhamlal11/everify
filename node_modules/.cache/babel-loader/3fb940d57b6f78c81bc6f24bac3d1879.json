{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamlal/Desktop/verification/src/components/QRScanner/index.js\";\nimport React, { Component } from 'react';\nimport './index.css';\nimport { scanImageData } from \"zbar.wasm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SCAN_PERIOD_MS = 100;\n\nfunction hasGetUserMedia() {\n  return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);\n}\n\nexport default class QRScanner extends Component {\n  constructor(props) {\n    super(props);\n\n    this.scanBarcode = async () => {\n      let canvas = document.createElement('canvas');\n      canvas.width = this.props.width;\n      canvas.height = this.props.height;\n      let ctx = canvas.getContext('2d');\n      ctx.drawImage(this.video, 0, 0, this.props.width, this.props.height);\n      let data = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const symbols = await scanImageData(data);\n      scanImageData(data); // console.log(symbols, Date.now());\n\n      for (let i = 0; i < symbols.length; ++i) {\n        const sym = symbols[i];\n        this.props.onScan(sym.decode());\n      }\n    };\n\n    this.state = {\n      hasUserMedia: false\n    };\n  }\n\n  componentDidMount() {\n    if (!hasGetUserMedia()) return;\n    QRScanner.mountedInstances.push(this);\n\n    if (!this.state.hasUserMedia && !QRScanner.userMediaRequested) {\n      this.requestUserMedia();\n    }\n\n    QRScanner.scanTimer = setInterval(() => {\n      this.scanBarcode();\n    }, SCAN_PERIOD_MS);\n  }\n\n  componentWillUpdate(nextProps) {\n    if (JSON.stringify(nextProps.videoConstraints) !== JSON.stringify(this.props.videoConstraints)) {\n      this.requestUserMedia();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(QRScanner.scanTimer);\n    const index = QRScanner.mountedInstances.indexOf(this);\n    QRScanner.mountedInstances.splice(index, 1);\n    QRScanner.userMediaRequested = false;\n\n    if (QRScanner.mountedInstances.length === 0 && this.state.hasUserMedia) {\n      if (this.stream.getVideoTracks && this.stream.getAudioTracks) {\n        this.stream.getVideoTracks().map(track => track.stop());\n      } else {\n        this.stream.stop();\n      }\n\n      window.URL.revokeObjectURL(this.state.src);\n    }\n  }\n\n  requestUserMedia() {\n    navigator.getUserMedia = navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n\n    const sourceSelected = videoConstraints => {\n      const constraints = {\n        video: videoConstraints || true\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n        QRScanner.mountedInstances.forEach(instance => instance.handleUserMedia(null, stream));\n      }).catch(e => {\n        QRScanner.mountedInstances.forEach(instance => instance.handleUserMedia(e));\n      });\n    };\n\n    if ('mediaDevices' in navigator) {\n      sourceSelected(this.props.videoConstraints);\n    } else {\n      const optionalSource = id => ({\n        optional: [{\n          sourceId: id\n        }]\n      });\n\n      const constraintToSourceId = constraint => {\n        const deviceId = (constraint || {}).deviceId;\n\n        if (typeof deviceId === 'string') {\n          return deviceId;\n        } else if (Array.isArray(deviceId) && deviceId.length > 0) {\n          return deviceId[0];\n        } else if (typeof deviceId === 'object' && deviceId.ideal) {\n          return deviceId.ideal;\n        }\n\n        return null;\n      };\n\n      MediaStreamTrack.getSources(sources => {\n        let videoSource = null;\n        sources.forEach(source => {\n          if (source.kind === 'video') {\n            videoSource = source.id;\n          }\n        });\n        const videoSourceId = constraintToSourceId(this.props.videoConstraints);\n\n        if (videoSourceId) {\n          videoSource = videoSourceId;\n        }\n\n        sourceSelected(optionalSource(videoSource));\n      });\n    }\n\n    QRScanner.userMediaRequested = true;\n  }\n\n  handleUserMedia(err, stream) {\n    if (err) {\n      this.setState({\n        hasUserMedia: false\n      });\n      this.props.onError(err);\n      return;\n    }\n\n    this.stream = stream;\n\n    try {\n      this.video.srcObject = stream;\n      this.setState({\n        hasUserMedia: true\n      });\n    } catch (error) {\n      this.setState({\n        hasUserMedia: true,\n        src: window.URL.createObjectURL(stream)\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"videoview\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        width: \"100%\",\n        src: this.state.src,\n        className: this.props.className,\n        playsInline: true,\n        style: this.props.style,\n        ref: ref => {\n          this.video = ref;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"overlay\",\n        width: this.props.width,\n        height: this.props.height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nQRScanner.defaultProps = {\n  className: '',\n  height: 1000,\n  width: 1000,\n  videoConstraints: {\n    facingMode: \"environment\"\n  }\n};\nQRScanner.mountedInstances = [];\nQRScanner.userMediaRequested = false;\nQRScanner.scanTimer = null;","map":{"version":3,"sources":["/Users/shubhamlal/Desktop/verification/src/components/QRScanner/index.js"],"names":["React","Component","scanImageData","SCAN_PERIOD_MS","hasGetUserMedia","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","QRScanner","constructor","props","scanBarcode","canvas","document","createElement","width","height","ctx","getContext","drawImage","video","data","getImageData","symbols","i","length","sym","onScan","decode","state","hasUserMedia","componentDidMount","mountedInstances","push","userMediaRequested","requestUserMedia","scanTimer","setInterval","componentWillUpdate","nextProps","JSON","stringify","videoConstraints","componentWillUnmount","clearInterval","index","indexOf","splice","stream","getVideoTracks","getAudioTracks","map","track","stop","window","URL","revokeObjectURL","src","sourceSelected","constraints","then","forEach","instance","handleUserMedia","catch","e","optionalSource","id","optional","sourceId","constraintToSourceId","constraint","deviceId","Array","isArray","ideal","MediaStreamTrack","getSources","sources","videoSource","source","kind","videoSourceId","err","setState","onError","srcObject","error","createObjectURL","render","className","style","ref","defaultProps","facingMode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './index.css';\nimport {scanImageData} from \"zbar.wasm\";\n\nconst SCAN_PERIOD_MS = 100;\n\nfunction hasGetUserMedia() {\n    return !!(\n        (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia ||\n        navigator.msGetUserMedia\n    );\n}\n\nexport default class QRScanner extends Component {\n    static defaultProps = {\n        className: '',\n        height: 1000,\n        width: 1000,\n        videoConstraints: {\n            facingMode: \"environment\"\n        }\n    };\n\n\n    static mountedInstances = [];\n\n    static userMediaRequested = false;\n\n    static scanTimer = null;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasUserMedia: false,\n        };\n    }\n\n    componentDidMount() {\n        if (!hasGetUserMedia()) return;\n\n        QRScanner.mountedInstances.push(this);\n\n        if (!this.state.hasUserMedia && !QRScanner.userMediaRequested) {\n            this.requestUserMedia();\n        }\n        QRScanner.scanTimer = setInterval(() => {\n            this.scanBarcode();\n        }, SCAN_PERIOD_MS);\n\n\n    }\n\n    componentWillUpdate(nextProps) {\n        if (\n            JSON.stringify(nextProps.videoConstraints) !==\n            JSON.stringify(this.props.videoConstraints)\n        ) {\n            this.requestUserMedia();\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(QRScanner.scanTimer);\n        const index = QRScanner.mountedInstances.indexOf(this);\n        QRScanner.mountedInstances.splice(index, 1);\n\n        QRScanner.userMediaRequested = false;\n        if (QRScanner.mountedInstances.length === 0 && this.state.hasUserMedia) {\n            if (this.stream.getVideoTracks && this.stream.getAudioTracks) {\n                this.stream.getVideoTracks().map(track => track.stop());\n            } else {\n                this.stream.stop();\n            }\n            window.URL.revokeObjectURL(this.state.src);\n        }\n    }\n\n    scanBarcode = async () => {\n\n        let canvas = document.createElement('canvas');\n        canvas.width = this.props.width;\n        canvas.height = this.props.height\n        let ctx = canvas.getContext('2d');\n        ctx.drawImage(this.video, 0, 0, this.props.width, this.props.height);\n        let data = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const symbols = await scanImageData(data);\n        scanImageData(data)\n        // console.log(symbols, Date.now());\n        for (let i = 0; i < symbols.length; ++i) {\n            const sym = symbols[i];\n\n            this.props.onScan(sym.decode())\n        }\n\n    }\n\n\n    requestUserMedia() {\n        navigator.getUserMedia =\n            navigator.mediaDevices.getUserMedia ||\n            navigator.webkitGetUserMedia ||\n            navigator.mozGetUserMedia ||\n            navigator.msGetUserMedia;\n\n        const sourceSelected = (videoConstraints) => {\n            const constraints = {\n                video: videoConstraints || true,\n            };\n\n            navigator.mediaDevices\n                .getUserMedia(constraints)\n                .then((stream) => {\n                    QRScanner.mountedInstances.forEach(instance =>\n                        instance.handleUserMedia(null, stream),\n                    );\n                })\n                .catch((e) => {\n                    QRScanner.mountedInstances.forEach(instance =>\n                        instance.handleUserMedia(e),\n                    );\n                });\n        };\n\n        if ('mediaDevices' in navigator) {\n            sourceSelected(this.props.videoConstraints);\n        } else {\n            const optionalSource = id => ({optional: [{sourceId: id}]});\n\n            const constraintToSourceId = (constraint) => {\n                const deviceId = (constraint || {}).deviceId;\n\n                if (typeof deviceId === 'string') {\n                    return deviceId;\n                } else if (Array.isArray(deviceId) && deviceId.length > 0) {\n                    return deviceId[0];\n                } else if (typeof deviceId === 'object' && deviceId.ideal) {\n                    return deviceId.ideal;\n                }\n\n                return null;\n            };\n\n            MediaStreamTrack.getSources((sources) => {\n\n                let videoSource = null;\n\n                sources.forEach((source) => {\n                    if (source.kind === 'video') {\n                        videoSource = source.id;\n                    }\n                });\n\n\n                const videoSourceId = constraintToSourceId(this.props.videoConstraints);\n                if (videoSourceId) {\n                    videoSource = videoSourceId;\n                }\n\n                sourceSelected(\n                    optionalSource(videoSource),\n                );\n            });\n        }\n\n        QRScanner.userMediaRequested = true;\n    }\n\n    handleUserMedia(err, stream) {\n        if (err) {\n            this.setState({hasUserMedia: false});\n            this.props.onError(err);\n\n            return;\n        }\n\n        this.stream = stream;\n\n        try {\n            this.video.srcObject = stream;\n            this.setState({hasUserMedia: true});\n        } catch (error) {\n            this.setState({\n                hasUserMedia: true,\n                src: window.URL.createObjectURL(stream),\n            });\n        }\n\n    }\n\n    render() {\n        return (\n            <div id='videoview'>\n                <video\n                    autoPlay\n                    width={\"100%\"}\n                    src={this.state.src}\n                    className={this.props.className}\n                    playsInline\n                    style={this.props.style}\n                    ref={(ref) => {\n                        this.video = ref;\n                    }}\n                />\n                <canvas id=\"overlay\" width={this.props.width} height={this.props.height}/>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}