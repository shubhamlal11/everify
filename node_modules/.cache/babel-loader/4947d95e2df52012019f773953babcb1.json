{"ast":null,"code":"/*!s\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {\n  RSAKeyPair\n} = require('crypto-ld');\n\nconst JwsLinkedDataSignature = require('./JwsLinkedDataSignature');\n\nmodule.exports = class RsaSignature2018 extends JwsLinkedDataSignature {\n  /**\n   * @param type {string} Provided by subclass.\n   *\n   * One of these parameters is required to use a suite for signing:\n   *\n   * @param [creator] {string} A key id URL to the paired public key.\n   * @param [verificationMethod] {string} A key id URL to the paired public key.\n   *\n   * This parameter is required for signing:\n   *\n   * @param [signer] {function} an optional signer.\n   *\n   * Advanced optional parameters and overrides:\n   *\n   * @param [proof] {object} a JSON-LD document with options to use for\n   *   the `proof` node (e.g. any other custom fields can be provided here\n   *   using a context different from security-v2).\n   * @param [date] {string|Date} signing date to use if not passed.\n   * @param [key] {LDKeyPair} an optional crypto-ld KeyPair.\n   * @param [useNativeCanonize] {boolean} true to use a native canonize\n   *   algorithm.\n   */\n  constructor() {\n    let {\n      signer,\n      key,\n      creator,\n      verificationMethod,\n      proof,\n      date,\n      useNativeCanonize\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      type: 'RsaSignature2018',\n      alg: 'PS256',\n      LDKeyClass: RSAKeyPair,\n      creator,\n      verificationMethod,\n      signer,\n      key,\n      proof,\n      date,\n      useNativeCanonize\n    });\n    this.requiredKeyType = 'RsaVerificationKey2018';\n  }\n\n};","map":{"version":3,"sources":["/Users/shubhamlal/Desktop/verification/node_modules/jsonld-signatures/lib/suites/RsaSignature2018.js"],"names":["RSAKeyPair","require","JwsLinkedDataSignature","module","exports","RsaSignature2018","constructor","signer","key","creator","verificationMethod","proof","date","useNativeCanonize","type","alg","LDKeyClass","requiredKeyType"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAM;AAACA,EAAAA;AAAD,IAAeC,OAAO,CAAC,WAAD,CAA5B;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,0BAAD,CAAtC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,gBAAN,SAA+BH,sBAA/B,CAAsD;AACrE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,WAAW,GAEH;AAAA,QAFI;AACVC,MAAAA,MADU;AACFC,MAAAA,GADE;AACGC,MAAAA,OADH;AACYC,MAAAA,kBADZ;AACgCC,MAAAA,KADhC;AACuCC,MAAAA,IADvC;AAC6CC,MAAAA;AAD7C,KAEJ,uEAAJ,EAAI;AACN,UAAM;AACJC,MAAAA,IAAI,EAAE,kBADF;AACsBC,MAAAA,GAAG,EAAE,OAD3B;AACoCC,MAAAA,UAAU,EAAEhB,UADhD;AAEJS,MAAAA,OAFI;AAEKC,MAAAA,kBAFL;AAEyBH,MAAAA,MAFzB;AAEiCC,MAAAA,GAFjC;AAEsCG,MAAAA,KAFtC;AAE6CC,MAAAA,IAF7C;AAGJC,MAAAA;AAHI,KAAN;AAIA,SAAKI,eAAL,GAAuB,wBAAvB;AACD;;AA/BoE,CAAvE","sourcesContent":["/*!s\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {RSAKeyPair} = require('crypto-ld');\nconst JwsLinkedDataSignature = require('./JwsLinkedDataSignature');\n\nmodule.exports = class RsaSignature2018 extends JwsLinkedDataSignature {\n  /**\n   * @param type {string} Provided by subclass.\n   *\n   * One of these parameters is required to use a suite for signing:\n   *\n   * @param [creator] {string} A key id URL to the paired public key.\n   * @param [verificationMethod] {string} A key id URL to the paired public key.\n   *\n   * This parameter is required for signing:\n   *\n   * @param [signer] {function} an optional signer.\n   *\n   * Advanced optional parameters and overrides:\n   *\n   * @param [proof] {object} a JSON-LD document with options to use for\n   *   the `proof` node (e.g. any other custom fields can be provided here\n   *   using a context different from security-v2).\n   * @param [date] {string|Date} signing date to use if not passed.\n   * @param [key] {LDKeyPair} an optional crypto-ld KeyPair.\n   * @param [useNativeCanonize] {boolean} true to use a native canonize\n   *   algorithm.\n   */\n  constructor({\n    signer, key, creator, verificationMethod, proof, date, useNativeCanonize\n  } = {}) {\n    super({\n      type: 'RsaSignature2018', alg: 'PS256', LDKeyClass: RSAKeyPair,\n      creator, verificationMethod, signer, key, proof, date,\n      useNativeCanonize});\n    this.requiredKeyType = 'RsaVerificationKey2018';\n  }\n};\n"]},"metadata":{},"sourceType":"script"}