{"ast":null,"code":"/*!\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst jsonld = require('jsonld');\n\nconst forge = require('node-forge');\n\nconst LinkedDataSignature2015 = require('./LinkedDataSignature2015');\n\nmodule.exports = class GraphSignature2012 extends LinkedDataSignature2015 {\n  constructor() {\n    let {\n      privateKeyPem,\n      publicKeyPem,\n      creator,\n      date,\n      domain,\n      nonce\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      type: 'GraphSignature2012',\n      privateKeyPem,\n      publicKeyPem,\n      creator,\n      date,\n      domain,\n      nonce\n    });\n  }\n\n  async canonize(input, _ref) {\n    let {\n      documentLoader,\n      expansionMap,\n      skipExpansion\n    } = _ref;\n    return jsonld.canonize(input, {\n      algorithm: 'URGNA2012',\n      format: 'application/n-quads',\n      documentLoader,\n      expansionMap,\n      skipExpansion\n    });\n  }\n  /**\n   * @param document {object} to be signed/verified.\n   * @param proof {object}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   * @param compactProof {boolean}\n   *\n   * @returns {Promise<{Uint8Array}>}.\n   */\n\n\n  async createVerifyData(_ref2) {\n    let {\n      document,\n      proof,\n      documentLoader,\n      expansionMap\n    } = _ref2;\n    const c14n = await this.canonize(document, {\n      documentLoader,\n      expansionMap\n    });\n    let verifyData = '';\n\n    if (proof.nonce !== null && proof.nonce !== undefined) {\n      verifyData += proof.nonce;\n    }\n\n    verifyData += proof.created;\n    verifyData += c14n;\n\n    if (proof.domain !== null && proof.domain !== undefined) {\n      verifyData += '@' + proof.domain;\n    }\n\n    const buffer = new forge.util.ByteBuffer(verifyData, 'utf8');\n    return forge.util.binary.raw.decode(buffer.getBytes());\n  }\n\n};","map":{"version":3,"sources":["/Users/shubhamlal/Desktop/verification/node_modules/jsonld-signatures/lib/suites/GraphSignature2012.js"],"names":["jsonld","require","forge","LinkedDataSignature2015","module","exports","GraphSignature2012","constructor","privateKeyPem","publicKeyPem","creator","date","domain","nonce","type","canonize","input","documentLoader","expansionMap","skipExpansion","algorithm","format","createVerifyData","document","proof","c14n","verifyData","undefined","created","buffer","util","ByteBuffer","binary","raw","decode","getBytes"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAArB;;AACA,MAAME,uBAAuB,GAAGF,OAAO,CAAC,2BAAD,CAAvC;;AAEAG,MAAM,CAACC,OAAP,GAAiB,MAAMC,kBAAN,SAAiCH,uBAAjC,CAAyD;AACxEI,EAAAA,WAAW,GACwD;AAAA,QADvD;AACVC,MAAAA,aADU;AACKC,MAAAA,YADL;AACmBC,MAAAA,OADnB;AAC4BC,MAAAA,IAD5B;AACkCC,MAAAA,MADlC;AAC0CC,MAAAA;AAD1C,KACuD,uEAAJ,EAAI;AACjE,UAAM;AACJC,MAAAA,IAAI,EAAE,oBADF;AAEJN,MAAAA,aAFI;AAEWC,MAAAA,YAFX;AAGJC,MAAAA,OAHI;AAGKC,MAAAA,IAHL;AAGWC,MAAAA,MAHX;AAGmBC,MAAAA;AAHnB,KAAN;AAID;;AAEa,QAARE,QAAQ,CACZC,KADY,QAC0C;AAAA,QAA/C;AAACC,MAAAA,cAAD;AAAiBC,MAAAA,YAAjB;AAA+BC,MAAAA;AAA/B,KAA+C;AACtD,WAAOnB,MAAM,CAACe,QAAP,CAAgBC,KAAhB,EAAuB;AAC5BI,MAAAA,SAAS,EAAE,WADiB;AAE5BC,MAAAA,MAAM,EAAE,qBAFoB;AAG5BJ,MAAAA,cAH4B;AAI5BC,MAAAA,YAJ4B;AAK5BC,MAAAA;AAL4B,KAAvB,CAAP;AAOD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACwB,QAAhBG,gBAAgB,QAC4B;AAAA,QAD3B;AACrBC,MAAAA,QADqB;AACXC,MAAAA,KADW;AACJP,MAAAA,cADI;AACYC,MAAAA;AADZ,KAC2B;AAChD,UAAMO,IAAI,GAAG,MAAM,KAAKV,QAAL,CAAcQ,QAAd,EAAwB;AACzCN,MAAAA,cADyC;AAEzCC,MAAAA;AAFyC,KAAxB,CAAnB;AAKA,QAAIQ,UAAU,GAAG,EAAjB;;AACA,QAAGF,KAAK,CAACX,KAAN,KAAgB,IAAhB,IAAwBW,KAAK,CAACX,KAAN,KAAgBc,SAA3C,EAAsD;AACpDD,MAAAA,UAAU,IAAIF,KAAK,CAACX,KAApB;AACD;;AACDa,IAAAA,UAAU,IAAIF,KAAK,CAACI,OAApB;AACAF,IAAAA,UAAU,IAAID,IAAd;;AACA,QAAGD,KAAK,CAACZ,MAAN,KAAiB,IAAjB,IAAyBY,KAAK,CAACZ,MAAN,KAAiBe,SAA7C,EAAwD;AACtDD,MAAAA,UAAU,IAAI,MAAMF,KAAK,CAACZ,MAA1B;AACD;;AACD,UAAMiB,MAAM,GAAG,IAAI3B,KAAK,CAAC4B,IAAN,CAAWC,UAAf,CAA0BL,UAA1B,EAAsC,MAAtC,CAAf;AACA,WAAOxB,KAAK,CAAC4B,IAAN,CAAWE,MAAX,CAAkBC,GAAlB,CAAsBC,MAAtB,CAA6BL,MAAM,CAACM,QAAP,EAA7B,CAAP;AACD;;AA/CuE,CAA1E","sourcesContent":["/*!\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst jsonld = require('jsonld');\nconst forge = require('node-forge');\nconst LinkedDataSignature2015 = require('./LinkedDataSignature2015');\n\nmodule.exports = class GraphSignature2012 extends LinkedDataSignature2015 {\n  constructor({\n    privateKeyPem, publicKeyPem, creator, date, domain, nonce} = {}) {\n    super({\n      type: 'GraphSignature2012',\n      privateKeyPem, publicKeyPem,\n      creator, date, domain, nonce});\n  }\n\n  async canonize(\n    input, {documentLoader, expansionMap, skipExpansion}) {\n    return jsonld.canonize(input, {\n      algorithm: 'URGNA2012',\n      format: 'application/n-quads',\n      documentLoader,\n      expansionMap,\n      skipExpansion\n    });\n  }\n\n  /**\n   * @param document {object} to be signed/verified.\n   * @param proof {object}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   * @param compactProof {boolean}\n   *\n   * @returns {Promise<{Uint8Array}>}.\n   */\n  async createVerifyData({\n    document, proof, documentLoader, expansionMap}) {\n    const c14n = await this.canonize(document, {\n      documentLoader,\n      expansionMap\n    });\n\n    let verifyData = '';\n    if(proof.nonce !== null && proof.nonce !== undefined) {\n      verifyData += proof.nonce;\n    }\n    verifyData += proof.created;\n    verifyData += c14n;\n    if(proof.domain !== null && proof.domain !== undefined) {\n      verifyData += '@' + proof.domain;\n    }\n    const buffer = new forge.util.ByteBuffer(verifyData, 'utf8');\n    return forge.util.binary.raw.decode(buffer.getBytes());\n  }\n};\n"]},"metadata":{},"sourceType":"script"}