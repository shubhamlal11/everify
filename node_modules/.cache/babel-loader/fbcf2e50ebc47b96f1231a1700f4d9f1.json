{"ast":null,"code":"const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function formatDate(givenDate) {\n  const dob = new Date(givenDate);\n  let day = dob.getDate().toLocaleString('en-US', {\n    minimumIntegerDigits: 2,\n    useGrouping: false\n  });\n  let monthName = monthNames[dob.getMonth()];\n  let year = dob.getFullYear();\n  return `${day}-${monthName}-${year}`;\n}\nexport const CertificateDetailsPaths = {\n  \"Name\": {\n    path: [\"credentialSubject\", \"name\"],\n    format: data => data\n  },\n  \"Age\": {\n    path: [\"credentialSubject\", \"age\"],\n    format: data => data\n  },\n  \"DOB\": {\n    path: [\"credentialSubject\", \"dob\"],\n    format: data => data,\n    optional: true\n  },\n  \"Gender\": {\n    path: [\"credentialSubject\", \"gender\"],\n    format: data => data\n  },\n  \"Certificate ID\": {\n    path: [\"evidence\", \"0\", \"certificateId\"],\n    format: data => data\n  },\n  \"Beneficiary ID\": {\n    path: [\"credentialSubject\", \"refId\"],\n    format: data => data\n  },\n  \"Vaccine Name\": {\n    path: [\"evidence\", \"0\", \"vaccine\"],\n    format: data => data\n  },\n  \"Vaccine Type\": {\n    path: [\"evidence\", \"0\", \"prophylaxis\"],\n    format: data => data,\n    optional: true\n  },\n  \"Date of ${dose} Dose\": {\n    path: [\"evidence\", \"0\", \"date\"],\n    format: data => formatDate(data)\n  },\n  \"Vaccination Status\": {\n    path: [\"evidence\", \"0\"],\n    format: data => {\n      const dose = parseInt(data.dose);\n      const totalDoses = parseInt(data.totalDoses) || 2;\n\n      if (dose > totalDoses) {\n        return \"Fully vaccinated and precaution dose administered\";\n      } else if (dose < totalDoses) {\n        return \"Partially Vaccinated\";\n      } else {\n        return \"Fully Vaccinated\";\n      }\n    }\n  },\n  \"Vaccination at\": {\n    path: [\"evidence\", \"0\", \"facility\", \"name\"],\n    format: data => data\n  },\n  \"Country of Vaccination\": {\n    path: [\"evidence\", \"0\", \"facility\", \"address\", \"addressCountry\"],\n    format: data => data,\n    optional: true\n  }\n};","map":{"version":3,"sources":["/Users/shubhamlal/Desktop/verification/src/constants.js"],"names":["monthNames","formatDate","givenDate","dob","Date","day","getDate","toLocaleString","minimumIntegerDigits","useGrouping","monthName","getMonth","year","getFullYear","CertificateDetailsPaths","path","format","data","optional","dose","parseInt","totalDoses"],"mappings":"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","sourcesContent":["const monthNames = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\",\n    \"May\", \"Jun\", \"Jul\", \"Aug\",\n    \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n];\n\nexport function formatDate(givenDate) {\n    const dob = new Date(givenDate);\n    let day = (dob.getDate()).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});\n    let monthName = monthNames[dob.getMonth()];\n    let year = dob.getFullYear();\n\n    return `${day}-${monthName}-${year}`;\n}\n\nexport const CertificateDetailsPaths = {\n    \"Name\": {\n        path: [\"credentialSubject\", \"name\"],\n        format: (data) => (data)\n    },\n    \"Age\": {\n        path: [\"credentialSubject\", \"age\"],\n        format: (data) => (data)\n    },\n    \"DOB\": {\n        path: [\"credentialSubject\", \"dob\"],\n        format: (data) => (data),\n        optional: true\n    },\n    \"Gender\": {\n        path: [\"credentialSubject\", \"gender\"],\n        format: (data) => (data)\n    },\n    \"Certificate ID\": {\n        path: [\"evidence\", \"0\", \"certificateId\"],\n        format: (data) => (data)\n    },\n    \"Beneficiary ID\": {\n        path: [\"credentialSubject\", \"refId\"],\n        format: (data) => (data)\n    },\n    \"Vaccine Name\": {\n        path: [\"evidence\", \"0\", \"vaccine\"],\n        format: (data) => (data)\n    },\n    \"Vaccine Type\": {\n        path: [\"evidence\", \"0\", \"prophylaxis\"],\n        format: (data) => (data),\n        optional: true\n    },\n    \"Date of ${dose} Dose\": {\n        path: [\"evidence\", \"0\", \"date\"],\n        format: (data) => (formatDate(data))\n    },\n    \"Vaccination Status\": {\n        path: [\"evidence\", \"0\"],\n        format: (data) => {\n            const dose = parseInt(data.dose)\n            const totalDoses = parseInt(data.totalDoses) || 2\n            if (dose > totalDoses) {\n               return \"Fully vaccinated and precaution dose administered\"\n            } else if (dose < totalDoses) {\n                return \"Partially Vaccinated\"\n            } else {\n                return \"Fully Vaccinated\"\n            }\n        }\n    },\n    \"Vaccination at\": {\n        path: [\"evidence\", \"0\", \"facility\", \"name\"],\n        format: (data) => (data)\n    },\n    \"Country of Vaccination\": {\n        path: [\"evidence\", \"0\", \"facility\", \"address\", \"addressCountry\"],\n        format: (data) => (data),\n        optional: true\n    }\n};\n"]},"metadata":{},"sourceType":"module"}