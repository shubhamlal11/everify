{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {\n  parseLinkHeader,\n  buildHeaders\n} = require('../util');\n\nconst {\n  LINK_HEADER_REL\n} = require('../constants');\n\nconst JsonLdError = require('../JsonLdError');\n\nconst RequestQueue = require('../RequestQueue');\n\nconst REGEX_LINK_HEADER = /(^|(\\r\\n))link:/i;\n/**\n * Creates a built-in XMLHttpRequest document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *          [xhr]: the XMLHttpRequest API to use.\n *\n * @return the XMLHttpRequest document loader.\n */\n\nmodule.exports = function () {\n  let {\n    secure,\n    headers = {},\n    xhr\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    headers: {}\n  };\n  headers = buildHeaders(headers);\n  const queue = new RequestQueue();\n  return queue.wrapLoader(loader);\n\n  async function loader(url) {\n    if (url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {\n      throw new JsonLdError('URL could not be dereferenced; only \"http\" and \"https\" URLs are ' + 'supported.', 'jsonld.InvalidUrl', {\n        code: 'loading document failed',\n        url\n      });\n    }\n\n    if (secure && url.indexOf('https') !== 0) {\n      throw new JsonLdError('URL could not be dereferenced; secure mode is enabled and ' + 'the URL\\'s scheme is not \"https\".', 'jsonld.InvalidUrl', {\n        code: 'loading document failed',\n        url\n      });\n    }\n\n    let req;\n\n    try {\n      req = await _get(xhr, url, headers);\n    } catch (e) {\n      throw new JsonLdError('URL could not be dereferenced, an error occurred.', 'jsonld.LoadDocumentError', {\n        code: 'loading document failed',\n        url,\n        cause: e\n      });\n    }\n\n    if (req.status >= 400) {\n      throw new JsonLdError('URL could not be dereferenced: ' + req.statusText, 'jsonld.LoadDocumentError', {\n        code: 'loading document failed',\n        url,\n        httpStatusCode: req.status\n      });\n    }\n\n    const doc = {\n      contextUrl: null,\n      documentUrl: url,\n      document: req.response\n    }; // handle Link Header (avoid unsafe header warning by existence testing)\n\n    const contentType = req.getResponseHeader('Content-Type');\n    let linkHeader;\n\n    if (REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {\n      linkHeader = req.getResponseHeader('Link');\n    }\n\n    if (linkHeader && contentType !== 'application/ld+json') {\n      // only 1 related link header permitted\n      linkHeader = parseLinkHeader(linkHeader)[LINK_HEADER_REL];\n\n      if (Array.isArray(linkHeader)) {\n        throw new JsonLdError('URL could not be dereferenced, it has more than one ' + 'associated HTTP Link Header.', 'jsonld.InvalidUrl', {\n          code: 'multiple context link headers',\n          url\n        });\n      }\n\n      if (linkHeader) {\n        doc.contextUrl = linkHeader.target;\n      }\n    }\n\n    return doc;\n  }\n};\n\nfunction _get(xhr, url, headers) {\n  xhr = xhr || XMLHttpRequest;\n  const req = new xhr();\n  return new Promise((resolve, reject) => {\n    req.onload = () => resolve(req);\n\n    req.onerror = err => reject(err);\n\n    req.open('GET', url, true);\n\n    for (const k in headers) {\n      req.setRequestHeader(k, headers[k]);\n    }\n\n    req.send();\n  });\n}","map":{"version":3,"sources":["/Users/shubhamlal/Desktop/verification/node_modules/jsonld/lib/documentLoaders/xhr.js"],"names":["parseLinkHeader","buildHeaders","require","LINK_HEADER_REL","JsonLdError","RequestQueue","REGEX_LINK_HEADER","module","exports","secure","headers","xhr","queue","wrapLoader","loader","url","indexOf","code","req","_get","e","cause","status","statusText","httpStatusCode","doc","contextUrl","documentUrl","document","response","contentType","getResponseHeader","linkHeader","test","getAllResponseHeaders","Array","isArray","target","XMLHttpRequest","Promise","resolve","reject","onload","onerror","err","open","k","setRequestHeader","send"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {parseLinkHeader, buildHeaders} = require('../util');\nconst {LINK_HEADER_REL} = require('../constants');\nconst JsonLdError = require('../JsonLdError');\nconst RequestQueue = require('../RequestQueue');\n\nconst REGEX_LINK_HEADER = /(^|(\\r\\n))link:/i;\n\n/**\n * Creates a built-in XMLHttpRequest document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *          [xhr]: the XMLHttpRequest API to use.\n *\n * @return the XMLHttpRequest document loader.\n */\nmodule.exports = ({\n  secure,\n  headers = {},\n  xhr\n} = {headers: {}}) => {\n  headers = buildHeaders(headers);\n  const queue = new RequestQueue();\n  return queue.wrapLoader(loader);\n\n  async function loader(url) {\n    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; only \"http\" and \"https\" URLs are ' +\n        'supported.',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n    if(secure && url.indexOf('https') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; secure mode is enabled and ' +\n        'the URL\\'s scheme is not \"https\".',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n\n    let req;\n    try {\n      req = await _get(xhr, url, headers);\n    } catch(e) {\n      throw new JsonLdError(\n        'URL could not be dereferenced, an error occurred.',\n        'jsonld.LoadDocumentError',\n        {code: 'loading document failed', url, cause: e});\n    }\n\n    if(req.status >= 400) {\n      throw new JsonLdError(\n        'URL could not be dereferenced: ' + req.statusText,\n        'jsonld.LoadDocumentError', {\n          code: 'loading document failed',\n          url,\n          httpStatusCode: req.status\n        });\n    }\n\n    const doc = {contextUrl: null, documentUrl: url, document: req.response};\n\n    // handle Link Header (avoid unsafe header warning by existence testing)\n    const contentType = req.getResponseHeader('Content-Type');\n    let linkHeader;\n    if(REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {\n      linkHeader = req.getResponseHeader('Link');\n    }\n    if(linkHeader && contentType !== 'application/ld+json') {\n      // only 1 related link header permitted\n      linkHeader = parseLinkHeader(linkHeader)[LINK_HEADER_REL];\n      if(Array.isArray(linkHeader)) {\n        throw new JsonLdError(\n          'URL could not be dereferenced, it has more than one ' +\n          'associated HTTP Link Header.',\n          'jsonld.InvalidUrl',\n          {code: 'multiple context link headers', url});\n      }\n      if(linkHeader) {\n        doc.contextUrl = linkHeader.target;\n      }\n    }\n\n    return doc;\n  }\n};\n\nfunction _get(xhr, url, headers) {\n  xhr = xhr || XMLHttpRequest;\n  const req = new xhr();\n  return new Promise((resolve, reject) => {\n    req.onload = () => resolve(req);\n    req.onerror = err => reject(err);\n    req.open('GET', url, true);\n    for(const k in headers) {\n      req.setRequestHeader(k, headers[k]);\n    }\n    req.send();\n  });\n}\n"]},"metadata":{},"sourceType":"script"}