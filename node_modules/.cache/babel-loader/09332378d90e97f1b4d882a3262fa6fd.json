{"ast":null,"code":"import axios from \"axios\";\nconst EVENT_ACTION_TYPES = {\n  ADD_EVENT: \"ADD_EVENT\",\n  REMOVE_EVENT: \"REMOVE_EVENT\"\n};\nexport const EVENT_TYPES = {\n  CERTIFICATE_DOWNLOAD: \"certificate-download\",\n  VALID_VERIFICATION: \"valid-verification\",\n  INVALID_VERIFICATION: \"invalid-verification\",\n  REVOKED_CERTIFICATE: \"revoked-certificate\"\n};\nconst initialState = {\n  data: []\n};\nexport function eventsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case EVENT_ACTION_TYPES.ADD_EVENT:\n      {\n        return { ...state,\n          data: [...state.data, {\n            id: state.data.length,\n            ...action.payload\n          }]\n        };\n      }\n\n    case EVENT_ACTION_TYPES.REMOVE_EVENT:\n      {\n        return { ...state,\n          data: state.data.filter(event => !action.payload.includes(event.id))\n        };\n      }\n\n    default:\n      return state;\n  }\n}\nexport const addEventAction = event => {\n  return {\n    type: EVENT_ACTION_TYPES.ADD_EVENT,\n    payload: { ...event,\n      date: new Date().toISOString()\n    }\n  };\n};\n\nconst removeEventsAction = eventIds => {\n  return {\n    type: EVENT_ACTION_TYPES.REMOVE_EVENT,\n    payload: eventIds\n  };\n};\n\nexport const postEvents = (_ref, dispatch) => {\n  let {\n    data\n  } = _ref;\n\n  if (data.length > 0) {\n    try {\n      axios.post(\"/divoc/api/v1/events/\", data).then(res => {\n        return dispatch(removeEventsAction(data.map(e => e.id)));\n      }).catch(e => {\n        console.log(e);\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/shubhamlal/Desktop/verification/src/redux/reducers/events.js"],"names":["axios","EVENT_ACTION_TYPES","ADD_EVENT","REMOVE_EVENT","EVENT_TYPES","CERTIFICATE_DOWNLOAD","VALID_VERIFICATION","INVALID_VERIFICATION","REVOKED_CERTIFICATE","initialState","data","eventsReducer","state","action","type","id","length","payload","filter","event","includes","addEventAction","date","Date","toISOString","removeEventsAction","eventIds","postEvents","dispatch","post","then","res","map","e","catch","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,kBAAkB,GAAG;AACvBC,EAAAA,SAAS,EAAE,WADY;AAEvBC,EAAAA,YAAY,EAAE;AAFS,CAA3B;AAIA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,oBAAoB,EAAE,sBADC;AAEvBC,EAAAA,kBAAkB,EAAE,oBAFG;AAGvBC,EAAAA,oBAAoB,EAAE,sBAHC;AAIvBC,EAAAA,mBAAmB,EAAE;AAJE,CAApB;AAMP,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB;AAIA,OAAO,SAASC,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBH,YAAsB;AAAA,MAARI,MAAQ;;AACxD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,kBAAkB,CAACC,SAAxB;AAAmC;AAC/B,eAAO,EACH,GAAGU,KADA;AAEHF,UAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgB;AAACK,YAAAA,EAAE,EAAEH,KAAK,CAACF,IAAN,CAAWM,MAAhB;AAAwB,eAAGH,MAAM,CAACI;AAAlC,WAAhB;AAFH,SAAP;AAKH;;AACD,SAAKhB,kBAAkB,CAACE,YAAxB;AAAsC;AAClC,eAAO,EACH,GAAGS,KADA;AAEHF,UAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,CAAWQ,MAAX,CAAkBC,KAAK,IAAI,CAACN,MAAM,CAACI,OAAP,CAAeG,QAAf,CAAwBD,KAAK,CAACJ,EAA9B,CAA5B;AAFH,SAAP;AAKH;;AACD;AACI,aAAOH,KAAP;AAhBR;AAkBH;AAED,OAAO,MAAMS,cAAc,GAAIF,KAAD,IAAW;AACrC,SAAO;AACHL,IAAAA,IAAI,EAAEb,kBAAkB,CAACC,SADtB;AAEHe,IAAAA,OAAO,EAAE,EAAC,GAAGE,KAAJ;AAAWG,MAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX;AAAjB;AAFN,GAAP;AAIH,CALM;;AAOP,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHZ,IAAAA,IAAI,EAAEb,kBAAkB,CAACE,YADtB;AAEHc,IAAAA,OAAO,EAAES;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,MAAMC,UAAU,GAAG,OAASC,QAAT,KAAsB;AAAA,MAArB;AAAClB,IAAAA;AAAD,GAAqB;;AAC5C,MAAIA,IAAI,CAACM,MAAL,GAAc,CAAlB,EAAqB;AACjB,QAAI;AACAhB,MAAAA,KAAK,CACF6B,IADH,CACQ,uBADR,EACiCnB,IADjC,EAEGoB,IAFH,CAESC,GAAD,IAAS;AACX,eAAOH,QAAQ,CAACH,kBAAkB,CAACf,IAAI,CAACsB,GAAL,CAASC,CAAC,IAAIA,CAAC,CAAClB,EAAhB,CAAD,CAAnB,CAAf;AACH,OAJH,EAIKmB,KAJL,CAIYD,CAAD,IAAO;AACdE,QAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACH,OAND;AAOH,KARD,CAQE,OAAOA,CAAP,EAAU;AACRE,MAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACH;AACJ;AACJ,CAdM","sourcesContent":["import axios from \"axios\";\n\nconst EVENT_ACTION_TYPES = {\n    ADD_EVENT: \"ADD_EVENT\",\n    REMOVE_EVENT: \"REMOVE_EVENT\"\n};\nexport const EVENT_TYPES = {\n    CERTIFICATE_DOWNLOAD: \"certificate-download\",\n    VALID_VERIFICATION: \"valid-verification\",\n    INVALID_VERIFICATION: \"invalid-verification\",\n    REVOKED_CERTIFICATE: \"revoked-certificate\",\n};\nconst initialState = {\n    data: [],\n};\n\nexport function eventsReducer(state = initialState, action) {\n    switch (action.type) {\n        case EVENT_ACTION_TYPES.ADD_EVENT: {\n            return {\n                ...state,\n                data: [...state.data, {id: state.data.length, ...action.payload}],\n\n            };\n        }\n        case EVENT_ACTION_TYPES.REMOVE_EVENT: {\n            return {\n                ...state,\n                data: state.data.filter(event => !action.payload.includes(event.id)),\n\n            };\n        }\n        default:\n            return state;\n    }\n}\n\nexport const addEventAction = (event) => {\n    return {\n        type: EVENT_ACTION_TYPES.ADD_EVENT,\n        payload: {...event, date: new Date().toISOString()}\n    }\n};\n\nconst removeEventsAction = (eventIds) => {\n    return {\n        type: EVENT_ACTION_TYPES.REMOVE_EVENT,\n        payload: eventIds\n    }\n};\n\nexport const postEvents = ({data}, dispatch) => {\n    if (data.length > 0) {\n        try {\n            axios\n              .post(\"/divoc/api/v1/events/\", data)\n              .then((res) => {\n                  return dispatch(removeEventsAction(data.map(e => e.id)));\n              }).catch((e) => {\n                console.log(e);\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n};"]},"metadata":{},"sourceType":"module"}