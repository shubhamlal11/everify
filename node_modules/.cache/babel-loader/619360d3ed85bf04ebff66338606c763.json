{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/shubhamlal/Desktop/verification/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/Users/shubhamlal/Desktop/verification/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadWasmInstance = void 0;\n/**\n * Webpack trys to parse .wasm file even if file-loader is used. Using extension\n * *.wasm.bin as a workaround.\n * See https://github.com/webpack/webpack/issues/6725.\n * To facilitate streaming compilation by the browser, *.wasm.bin files\n * should be served as MIME type 'application/wasm'.\n */\n// import wasmBinaryFile from './zbar.wasm';\n\nvar zbar_wasm_bin_1 = __importDefault(require(\"./zbar.wasm.bin\"));\n\nvar zbar_1 = __importDefault(require(\"./zbar\")); // locateFile is used to override the file path to the path provided by\n// file-loader.\n\n\nvar locateFile = function locateFile(file, _scriptDir) {\n  if (file != 'zbar.wasm') {\n    console.error('Unexpected file:', file);\n  }\n\n  return zbar_wasm_bin_1.default;\n};\n\nvar loadWasmInstance = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(importObj) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            importObj['locateFile'] = locateFile;\n            _context.next = 3;\n            return (0, zbar_1.default)(importObj);\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadWasmInstance(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.loadWasmInstance = loadWasmInstance;","map":{"version":3,"sources":["../src/load-browser.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;AAMG;AACH;;AACA,IAAA,eAAA,GAAA,eAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AAEA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,C,CAEA;AACA;;;AACA,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,IAAD,EAAe,UAAf,EAAqC;AACtD,MAAI,IAAI,IAAI,WAAZ,EAAyB;AACvB,IAAA,OAAO,CAAC,KAAR,CAAc,kBAAd,EAAkC,IAAlC;AACD;;AACD,SAAO,eAAA,CAAA,OAAP;AACD,CALD;;AAOO,IAAM,gBAAgB;AAAA,sEAAG,iBAC9B,SAD8B;AAAA;AAAA;AAAA;AAAA;AAG9B,YAAA,SAAS,CAAC,YAAD,CAAT,GAA0B,UAA1B;AAH8B;AAAA,mBAIjB,CAAA,GAAA,MAAA,CAAA,OAAA,EAAY,SAAZ,CAJiB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhB,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;AAAM,OAAA,CAAA,gBAAA,GAAgB,gBAAhB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadWasmInstance = void 0;\n/**\n * Webpack trys to parse .wasm file even if file-loader is used. Using extension\n * *.wasm.bin as a workaround.\n * See https://github.com/webpack/webpack/issues/6725.\n * To facilitate streaming compilation by the browser, *.wasm.bin files\n * should be served as MIME type 'application/wasm'.\n */\n// import wasmBinaryFile from './zbar.wasm';\nconst zbar_wasm_bin_1 = __importDefault(require(\"./zbar.wasm.bin\"));\nconst zbar_1 = __importDefault(require(\"./zbar\"));\n// locateFile is used to override the file path to the path provided by\n// file-loader.\nconst locateFile = (file, _scriptDir) => {\n    if (file != 'zbar.wasm') {\n        console.error('Unexpected file:', file);\n    }\n    return zbar_wasm_bin_1.default;\n};\nconst loadWasmInstance = async (importObj) => {\n    importObj['locateFile'] = locateFile;\n    return await (0, zbar_1.default)(importObj);\n};\nexports.loadWasmInstance = loadWasmInstance;\n//# sourceMappingURL=load-browser.js.map"]},"metadata":{},"sourceType":"script"}