{"ast":null,"code":"/*!\n * Copyright (c) 2018-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst env = require('./env');\n\nconst forge = require('node-forge');\n\nconst base64url = require('base64url-universal');\n\nconst {\n  pki: {\n    ed25519\n  },\n  util: {\n    binary: {\n      base58\n    }\n  }\n} = forge;\n\nconst util = require('./util');\n\nconst LDKeyPair = require('./LDKeyPair');\n\nclass Ed25519KeyPair extends LDKeyPair {\n  /* eslint-disable max-len */\n\n  /**\n   * An implementation of\n   * [Ed25519 Signature 2018]{@link https://w3c-dvcg.github.io/lds-ed25519-2018/}\n   * for\n   * [jsonld-signatures.]{@link https://github.com/digitalbazaar/jsonld-signatures}\n   * @example\n   * > const privateKeyBase58 =\n   *   '3Mmk4UzTRJTEtxaKk61LxtgUxAa2Dg36jF6VogPtRiKvfpsQWKPCLesKSV182RMmvM'\n   *   + 'JKk6QErH3wgdHp8itkSSiF';\n   * > const options = {\n   *   publicKeyBase58: 'GycSSui454dpYRKiFdsQ5uaE8Gy3ac6dSMPcAoQsk8yq',\n   *   privateKeyBase58\n   * };\n   * > const EDKey = new Ed25519KeyPair(options);\n   * > EDKey\n   * Ed25519KeyPair { ...\n   * @param {KeyPairOptions} options - Base58 keys plus\n   * other options most follow\n   * [KeyPairOptions]{@link ./index.md#KeyPairOptions}.\n   * @param {string} options.publicKeyBase58 - Base58 encoded Public Key\n   * unencoded is 32-bytes.\n   * @param {string} options.privateKeyBase58 - Base58 Private Key\n   * unencoded is 64-bytes.\n   */\n\n  /* eslint-enable */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    this.type = 'Ed25519VerificationKey2018';\n    this.privateKeyBase58 = options.privateKeyBase58;\n    this.publicKeyBase58 = options.publicKeyBase58;\n  }\n  /**\n   * Returns the Base58 encoded public key.\n   * @implements {LDKeyPair#publicKey}\n   * @readonly\n   *\n   * @returns {string} The Base58 encoded public key.\n   * @see [publicKey]{@link ./LDKeyPair.md#publicKey}\n   */\n\n\n  get publicKey() {\n    return this.publicKeyBase58;\n  }\n  /**\n   * Returns the Base58 encoded private key.\n   * @implements {LDKeyPair#privateKey}\n   * @readonly\n   *\n   * @returns {string} The Base58 encoded private key.\n   * @see [privateKey]{@link ./LDKeyPair.md#privateKey}\n   */\n\n\n  get privateKey() {\n    return this.privateKeyBase58;\n  }\n  /**\n   * Generates a KeyPair with an optional deterministic seed.\n   * @example\n   * > const keyPair = await Ed25519KeyPair.generate();\n   * > keyPair\n   * Ed25519KeyPair { ...\n   * @param {KeyPairOptions} [options={}] - See LDKeyPair\n   * docstring for full list.\n   * @param {Uint8Array|Buffer} [options.seed] -\n   * a 32-byte array seed for a deterministic key.\n   *\n   * @returns {Promise<Ed25519KeyPair>} Generates a key pair.\n   */\n\n\n  static async generate() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (env.nodejs && require('semver').gte(process.version, '12.0.0')) {\n      const bs58 = require('bs58');\n\n      const {\n        asn1,\n        ed25519: {\n          privateKeyFromAsn1,\n          publicKeyFromAsn1\n        },\n        util: {\n          ByteBuffer\n        }\n      } = forge;\n\n      const {\n        promisify\n      } = require('util');\n\n      const {\n        createPublicKey,\n        generateKeyPair\n      } = require('crypto');\n\n      const publicKeyEncoding = {\n        format: 'der',\n        type: 'spki'\n      };\n      const privateKeyEncoding = {\n        format: 'der',\n        type: 'pkcs8'\n      }; // if no seed provided, generate a random key\n\n      if (!('seed' in options)) {\n        const generateKeyPairAsync = promisify(generateKeyPair);\n        const {\n          publicKey,\n          privateKey\n        } = await generateKeyPairAsync('ed25519', {\n          publicKeyEncoding,\n          privateKeyEncoding\n        });\n        const publicKeyBytes = publicKeyFromAsn1(asn1.fromDer(new ByteBuffer(publicKey)));\n        const {\n          privateKeyBytes\n        } = privateKeyFromAsn1(asn1.fromDer(new ByteBuffer(privateKey)));\n        return new Ed25519KeyPair({\n          publicKeyBase58: bs58.encode(publicKeyBytes),\n          // private key is the 32 byte private key + 32 byte public key\n          privateKeyBase58: bs58.encode(Buffer.concat([privateKeyBytes, publicKeyBytes])),\n          ...options\n        });\n      } // create a key from the provided seed\n\n\n      const {\n        seed\n      } = options;\n      let seedBytes;\n\n      if (seed instanceof Uint8Array || Buffer.isBuffer(seed)) {\n        seedBytes = Buffer.from(seed);\n      }\n\n      if (!(Buffer.isBuffer(seedBytes) && seedBytes.length === 32)) {\n        throw new TypeError('`seed` must be a 32 byte Buffer or Uint8Array.');\n      }\n\n      const _privateKey = require('./ed25519PrivateKeyNode12'); // create a node private key\n\n\n      const privateKey = _privateKey.create({\n        seedBytes\n      }); // create a node public key from the private key\n\n\n      const publicKey = createPublicKey(privateKey); // export the keys and extract key bytes from the exported DERs\n\n      const publicKeyBytes = publicKeyFromAsn1(asn1.fromDer(new ByteBuffer(publicKey.export(publicKeyEncoding))));\n      const {\n        privateKeyBytes\n      } = privateKeyFromAsn1(asn1.fromDer(new ByteBuffer(privateKey.export(privateKeyEncoding))));\n      return new Ed25519KeyPair({\n        publicKeyBase58: bs58.encode(publicKeyBytes),\n        // private key is the 32 byte private key + 32 byte public key\n        privateKeyBase58: bs58.encode(Buffer.concat([privateKeyBytes, publicKeyBytes])),\n        ...options\n      });\n    }\n\n    if (env.nodejs) {\n      // TODO: use native node crypto api once it's available\n      const sodium = require('sodium-native');\n\n      const bs58 = require('bs58');\n\n      const publicKey = new Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n      const privateKey = new Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n\n      if ('seed' in options) {\n        sodium.crypto_sign_seed_keypair(publicKey, privateKey, options.seed);\n      } else {\n        sodium.crypto_sign_keypair(publicKey, privateKey);\n      }\n\n      return new Ed25519KeyPair({\n        publicKeyBase58: bs58.encode(publicKey),\n        privateKeyBase58: bs58.encode(privateKey),\n        ...options\n      });\n    }\n\n    const generateOptions = {};\n\n    if ('seed' in options) {\n      generateOptions.seed = options.seed;\n    }\n\n    const {\n      publicKey,\n      privateKey\n    } = ed25519.generateKeyPair(generateOptions);\n    return new Ed25519KeyPair({\n      publicKeyBase58: base58.encode(publicKey),\n      privateKeyBase58: base58.encode(privateKey),\n      ...options\n    });\n  }\n  /**\n   * Creates an Ed25519 Key Pair from an existing private key.\n   * @example\n   * > const options = {\n   *   privateKeyBase58: privateKey\n   * };\n   * > const key = await Ed25519KeyPair.from(options);\n   * > key\n   * Ed25519KeyPair { ...\n   * @param {Object} options - Contains a private key.\n   * @param {Object} [options.privateKey] - A private key object.\n   * @param {string} [options.privateKeyBase58] - A Base58\n   * Private key string.\n   *\n   * @returns {Ed25519KeyPair} An Ed25519 Key Pair.\n   */\n\n\n  static async from(options) {\n    const privateKeyBase58 = options.privateKeyBase58 || // legacy privateDidDoc format\n    options.privateKey && options.privateKey.privateKeyBase58;\n    const keyPair = new Ed25519KeyPair({\n      privateKeyBase58,\n      type: options.type || options.keyType,\n      // Todo: deprecate keyType usage\n      ...options\n    });\n    return keyPair;\n  }\n  /* eslint-disable max-len */\n\n  /**\n   * Returns a signer object for use with\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   * @example\n   * > const signer = keyPair.signer();\n   * > signer\n   * { sign: [AsyncFunction: sign] }\n   * > signer.sign({data});\n   *\n   * @returns {{sign: Function}} A signer for the json-ld block.\n   */\n\n  /* eslint-enable */\n\n\n  signer() {\n    return ed25519SignerFactory(this);\n  }\n  /* eslint-disable max-len */\n\n  /**\n   * Returns a verifier object for use with\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   * @example\n   * > const verifier = keyPair.verifier();\n   * > verifier\n   * { verify: [AsyncFunction: verify] }\n   * > verifier.verify(key);\n   *\n   * @returns {{verify: Function}} Used to verify jsonld-signatures.\n   */\n\n  /* eslint-enable */\n\n\n  verifier() {\n    return ed25519VerifierFactory(this);\n  }\n  /* eslint-disable max-len */\n\n  /**\n   * Adds a public key base to a public key node.\n   * @example\n   * > keyPair.addEncodedPublicKey({});\n   * { publicKeyBase58: 'GycSSui454dpYRKiFdsQ5uaE8Gy3ac6dSMPcAoQsk8yq' }\n   * @param {Object} publicKeyNode - The public key node in a jsonld-signature.\n   * @param {string} publicKeyNode.publicKeyBase58 - Base58 Public Key for\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   *\n   * @returns {{verify: Function}} A PublicKeyNode in a block.\n   */\n\n  /* eslint-enable */\n\n\n  addEncodedPublicKey(publicKeyNode) {\n    publicKeyNode.publicKeyBase58 = this.publicKeyBase58;\n    return publicKeyNode;\n  }\n  /**\n   * Adds an encrypted private key to the KeyPair.\n   * @param {Object} keyNode - A plain object.\n   *\n   * @return {Object} The keyNode with an encrypted private key attached.\n   */\n\n\n  async addEncryptedPrivateKey(keyNode) {\n    if (this.passphrase !== null) {\n      keyNode.privateKeyJwe = await this.encrypt({\n        privateKeyBase58: this.privateKeyBase58\n      }, this.passphrase);\n    } else {\n      // no passphrase, do not encrypt private key\n      keyNode.privateKeyBase58 = this.privateKeyBase58;\n    }\n\n    return keyNode;\n  }\n  /**\n   * Produces a 32-byte encrypted key.\n   * @example\n   * > const encryptedContent = await edKeyPair\n   *   .encrypt(privateKey, 'Test1244!');\n   * @param {string} privateKey - The base58 private key.\n   * @param {string} password - The password.\n   *\n   * @returns {Promise<JWE>} Produces JSON Web encrypted content.\n   * @see [JWE]{@link ./index.md#JWE}\n   */\n\n\n  async encrypt(privateKey, password) {\n    const keySize = 32;\n    const salt = forge.random.getBytesSync(32);\n    const iterations = 4096;\n    const key = await LDKeyPair.pbkdf2(password, salt, iterations, keySize);\n    const jweHeader = {\n      alg: 'PBES2-A128GCMKW',\n      enc: 'A128GCMKW',\n      jwk: {\n        kty: 'PBKDF2',\n        s: base64url.encode(salt),\n        c: iterations\n      }\n    }; // FIXME: this probably needs to be cleaned up/made more standard\n\n    const iv = forge.random.getBytesSync(12);\n    const cipher = forge.cipher.createCipher('AES-GCM', key);\n    cipher.start({\n      iv\n    });\n    cipher.update(forge.util.createBuffer(JSON.stringify(privateKey)));\n    cipher.finish();\n    const encrypted = cipher.output.getBytes();\n    const tag = cipher.mode.tag.getBytes();\n    const jwe = {\n      unprotected: jweHeader,\n      iv: base64url.encode(iv),\n      ciphertext: base64url.encode(encrypted),\n      tag: base64url.encode(tag)\n    };\n    return jwe;\n  }\n  /**\n   * Decrypts jwe content to a privateKey.\n   * @param {JWE} jwe - Encrypted content from a block.\n   * @param {string} password - Password for the key used to sign the content.\n   *\n   * @returns {Object} A Base58 private key.\n   * @see [JWE]{@link ./index.md#JWE}\n   */\n\n\n  async decrypt(jwe, password) {\n    // FIXME: check header, implement according to JWE standard\n    const keySize = 32;\n    const {\n      c: iterations\n    } = jwe.unprotected.jwk;\n    let {\n      s: salt\n    } = jwe.unprotected.jwk;\n    salt = base64url.encode(salt);\n    const key = await LDKeyPair.pbkdf2(password, salt, iterations, keySize);\n    const iv = base64url.encode(jwe.iv);\n    const tag = base64url.encode(jwe.tag);\n    const decipher = forge.cipher.createDecipher('AES-GCM', key);\n    decipher.start({\n      iv,\n      tag\n    });\n    decipher.update(base64url.encode(jwe.ciphertext));\n    const pass = decipher.finish();\n\n    if (!pass) {\n      throw new Error('Invalid password.');\n    }\n\n    const privateKey = JSON.parse(decipher.output.getBytes());\n    return privateKey;\n  }\n  /**\n   * Generates and returns a multiformats encoded\n   * ed25519 public key fingerprint (for use with cryptonyms, for example).\n   * @see https://github.com/multiformats/multicodec\n   *\n   * @param {string} publicKeyBase58 - The base58 encoded public key material.\n   *\n   * @returns {string} The fingerprint.\n   */\n\n\n  static fingerprintFromPublicKey(_ref) {\n    let {\n      publicKeyBase58\n    } = _ref;\n    // ed25519 cryptonyms are multicodec encoded values, specifically:\n    // (multicodec ed25519-pub 0xed01 + key bytes)\n    const pubkeyBytes = util.base58Decode({\n      decode: base58.decode,\n      keyMaterial: publicKeyBase58,\n      type: 'public'\n    });\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    buffer[0] = 0xed;\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2); // prefix with `z` to indicate multi-base base58btc encoding\n\n    return `z${base58.encode(buffer)}`;\n  }\n  /**\n   * Generates and returns a multiformats encoded\n   * ed25519 public key fingerprint (for use with cryptonyms, for example).\n   * @see https://github.com/multiformats/multicodec\n   *\n   * @returns {string} The fingerprint.\n   */\n\n\n  fingerprint() {\n    const {\n      publicKeyBase58\n    } = this;\n    return Ed25519KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58\n    });\n  }\n  /**\n   * Tests whether the fingerprint was\n   * generated from a given key pair.\n   * @example\n   * > edKeyPair.verifyFingerprint('z2S2Q6MkaFJewa');\n   * {valid: true};\n   * @param {string} fingerprint - A Base58 public key.\n   *\n   * @returns {Object} An object indicating valid is true or false.\n   */\n\n\n  verifyFingerprint(fingerprint) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false\n      };\n    }\n\n    let fingerprintBuffer;\n\n    try {\n      fingerprintBuffer = util.base58Decode({\n        decode: base58.decode,\n        keyMaterial: fingerprint.slice(1),\n        type: `fingerprint's`\n      });\n    } catch (e) {\n      return {\n        error: e,\n        valid: false\n      };\n    }\n\n    let publicKeyBuffer;\n\n    try {\n      publicKeyBuffer = util.base58Decode({\n        decode: base58.decode,\n        keyMaterial: this.publicKeyBase58,\n        type: 'public'\n      });\n    } catch (e) {\n      return {\n        error: e,\n        valid: false\n      };\n    } // validate the first two multicodec bytes 0xed01\n\n\n    const valid = fingerprintBuffer.slice(0, 2).toString('hex') === 'ed01' && publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false\n      };\n    }\n\n    return {\n      valid\n    };\n  }\n\n}\n/**\n * @ignore\n * Returns an object with an async sign function.\n * The sign function is bound to the KeyPair\n * and then returned by the KeyPair's signer method.\n * @param {Ed25519KeyPair} key - An ED25519KeyPair.\n * @example\n * > const mySigner = ed25519SignerFactory(edKeyPair);\n * > await mySigner.sign({data})\n *\n * @returns {{sign: Function}} An object with an async function sign\n * using the private key passed in.\n */\n\n\nfunction ed25519SignerFactory(key) {\n  if (!key.privateKeyBase58) {\n    return {\n      async sign() {\n        throw new Error('No private key to sign with.');\n      }\n\n    };\n  }\n\n  if (env.nodejs && require('semver').gte(process.version, '12.0.0')) {\n    const bs58 = require('bs58');\n\n    const privateKeyBytes = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.privateKeyBase58,\n      type: 'private'\n    });\n\n    const _privateKey = require('./ed25519PrivateKeyNode12'); // create a Node private key\n\n\n    const privateKey = _privateKey.create({\n      privateKeyBytes\n    });\n\n    const {\n      sign\n    } = require('crypto');\n\n    return {\n      async sign(_ref2) {\n        let {\n          data\n        } = _ref2;\n        const signature = sign(null, Buffer.from(data.buffer, data.byteOffset, data.length), privateKey);\n        return signature;\n      }\n\n    };\n  }\n\n  if (env.nodejs) {\n    const sodium = require('sodium-native');\n\n    const bs58 = require('bs58');\n\n    const privateKey = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.privateKeyBase58,\n      type: 'private'\n    });\n    return {\n      async sign(_ref3) {\n        let {\n          data\n        } = _ref3;\n        const signature = Buffer.alloc(sodium.crypto_sign_BYTES);\n        await sodium.crypto_sign_detached(signature, Buffer.from(data.buffer, data.byteOffset, data.length), privateKey);\n        return signature;\n      }\n\n    };\n  } // browser implementation\n\n\n  const privateKey = util.base58Decode({\n    decode: base58.decode,\n    keyMaterial: key.privateKeyBase58,\n    type: 'private'\n  });\n  return {\n    async sign(_ref4) {\n      let {\n        data\n      } = _ref4;\n      return ed25519.sign({\n        message: data,\n        privateKey\n      });\n    }\n\n  };\n}\n/**\n * @ignore\n * Returns an object with an async verify function.\n * The verify function is bound to the KeyPair\n * and then returned by the KeyPair's verifier method.\n * @param {Ed25519KeyPair} key - An Ed25519KeyPair.\n * @example\n * > const myVerifier = ed25519Verifier(edKeyPair);\n * > await myVerifier.verify({data, signature});\n *\n * @returns {{verify: Function}} An async verifier specific\n * to the key passed in.\n */\n\n\nfunction ed25519VerifierFactory(key) {\n  if (env.nodejs && require('semver').gte(process.version, '12.0.0')) {\n    const bs58 = require('bs58');\n\n    const publicKeyBytes = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.publicKeyBase58,\n      type: 'public'\n    });\n\n    const _publicKey = require('./ed25519PublicKeyNode12'); // create a Node public key\n\n\n    const publicKey = _publicKey.create({\n      publicKeyBytes\n    });\n\n    const {\n      verify\n    } = require('crypto');\n\n    return {\n      async verify(_ref5) {\n        let {\n          data,\n          signature\n        } = _ref5;\n        return verify(null, Buffer.from(data.buffer, data.byteOffset, data.length), publicKey, signature);\n      }\n\n    };\n  }\n\n  if (env.nodejs) {\n    const sodium = require('sodium-native');\n\n    const bs58 = require('bs58');\n\n    const publicKey = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.publicKeyBase58,\n      type: 'public'\n    });\n    return {\n      async verify(_ref6) {\n        let {\n          data,\n          signature\n        } = _ref6;\n        return sodium.crypto_sign_verify_detached(Buffer.from(signature.buffer, signature.byteOffset, signature.length), Buffer.from(data.buffer, data.byteOffset, data.length), publicKey);\n      }\n\n    };\n  } // browser implementation\n\n\n  const publicKey = util.base58Decode({\n    decode: base58.decode,\n    keyMaterial: key.publicKeyBase58,\n    type: 'public'\n  });\n  return {\n    async verify(_ref7) {\n      let {\n        data,\n        signature\n      } = _ref7;\n      return ed25519.verify({\n        message: data,\n        signature,\n        publicKey\n      });\n    }\n\n  };\n}\n\nmodule.exports = Ed25519KeyPair;","map":{"version":3,"sources":["/Users/shubhamlal/Desktop/verification/node_modules/crypto-ld/lib/Ed25519KeyPair.js"],"names":["env","require","forge","base64url","pki","ed25519","util","binary","base58","LDKeyPair","Ed25519KeyPair","constructor","options","type","privateKeyBase58","publicKeyBase58","publicKey","privateKey","generate","nodejs","gte","process","version","bs58","asn1","privateKeyFromAsn1","publicKeyFromAsn1","ByteBuffer","promisify","createPublicKey","generateKeyPair","publicKeyEncoding","format","privateKeyEncoding","generateKeyPairAsync","publicKeyBytes","fromDer","privateKeyBytes","encode","Buffer","concat","seed","seedBytes","Uint8Array","isBuffer","from","length","TypeError","_privateKey","create","export","sodium","alloc","crypto_sign_PUBLICKEYBYTES","crypto_sign_SECRETKEYBYTES","crypto_sign_seed_keypair","crypto_sign_keypair","generateOptions","keyPair","keyType","signer","ed25519SignerFactory","verifier","ed25519VerifierFactory","addEncodedPublicKey","publicKeyNode","addEncryptedPrivateKey","keyNode","passphrase","privateKeyJwe","encrypt","password","keySize","salt","random","getBytesSync","iterations","key","pbkdf2","jweHeader","alg","enc","jwk","kty","s","c","iv","cipher","createCipher","start","update","createBuffer","JSON","stringify","finish","encrypted","output","getBytes","tag","mode","jwe","unprotected","ciphertext","decrypt","decipher","createDecipher","pass","Error","parse","fingerprintFromPublicKey","pubkeyBytes","base58Decode","decode","keyMaterial","buffer","set","fingerprint","verifyFingerprint","error","valid","fingerprintBuffer","slice","e","publicKeyBuffer","toString","equals","sign","data","signature","byteOffset","crypto_sign_BYTES","crypto_sign_detached","message","_publicKey","verify","crypto_sign_verify_detached","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2018-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst env = require('./env');\nconst forge = require('node-forge');\nconst base64url = require('base64url-universal');\nconst {pki: {ed25519}, util: {binary: {base58}}} = forge;\nconst util = require('./util');\nconst LDKeyPair = require('./LDKeyPair');\n\nclass Ed25519KeyPair extends LDKeyPair {\n  /* eslint-disable max-len */\n  /**\n   * An implementation of\n   * [Ed25519 Signature 2018]{@link https://w3c-dvcg.github.io/lds-ed25519-2018/}\n   * for\n   * [jsonld-signatures.]{@link https://github.com/digitalbazaar/jsonld-signatures}\n   * @example\n   * > const privateKeyBase58 =\n   *   '3Mmk4UzTRJTEtxaKk61LxtgUxAa2Dg36jF6VogPtRiKvfpsQWKPCLesKSV182RMmvM'\n   *   + 'JKk6QErH3wgdHp8itkSSiF';\n   * > const options = {\n   *   publicKeyBase58: 'GycSSui454dpYRKiFdsQ5uaE8Gy3ac6dSMPcAoQsk8yq',\n   *   privateKeyBase58\n   * };\n   * > const EDKey = new Ed25519KeyPair(options);\n   * > EDKey\n   * Ed25519KeyPair { ...\n   * @param {KeyPairOptions} options - Base58 keys plus\n   * other options most follow\n   * [KeyPairOptions]{@link ./index.md#KeyPairOptions}.\n   * @param {string} options.publicKeyBase58 - Base58 encoded Public Key\n   * unencoded is 32-bytes.\n   * @param {string} options.privateKeyBase58 - Base58 Private Key\n   * unencoded is 64-bytes.\n   */\n  /* eslint-enable */\n  constructor(options = {}) {\n    super(options);\n    this.type = 'Ed25519VerificationKey2018';\n    this.privateKeyBase58 = options.privateKeyBase58;\n    this.publicKeyBase58 = options.publicKeyBase58;\n  }\n  /**\n   * Returns the Base58 encoded public key.\n   * @implements {LDKeyPair#publicKey}\n   * @readonly\n   *\n   * @returns {string} The Base58 encoded public key.\n   * @see [publicKey]{@link ./LDKeyPair.md#publicKey}\n   */\n  get publicKey() {\n    return this.publicKeyBase58;\n  }\n  /**\n   * Returns the Base58 encoded private key.\n   * @implements {LDKeyPair#privateKey}\n   * @readonly\n   *\n   * @returns {string} The Base58 encoded private key.\n   * @see [privateKey]{@link ./LDKeyPair.md#privateKey}\n   */\n  get privateKey() {\n    return this.privateKeyBase58;\n  }\n\n  /**\n   * Generates a KeyPair with an optional deterministic seed.\n   * @example\n   * > const keyPair = await Ed25519KeyPair.generate();\n   * > keyPair\n   * Ed25519KeyPair { ...\n   * @param {KeyPairOptions} [options={}] - See LDKeyPair\n   * docstring for full list.\n   * @param {Uint8Array|Buffer} [options.seed] -\n   * a 32-byte array seed for a deterministic key.\n   *\n   * @returns {Promise<Ed25519KeyPair>} Generates a key pair.\n   */\n  static async generate(options = {}) {\n    if(env.nodejs && require('semver').gte(process.version, '12.0.0')) {\n      const bs58 = require('bs58');\n      const {\n        asn1, ed25519: {privateKeyFromAsn1, publicKeyFromAsn1},\n        util: {ByteBuffer}\n      } = forge;\n      const {promisify} = require('util');\n      const {createPublicKey, generateKeyPair} = require('crypto');\n      const publicKeyEncoding = {format: 'der', type: 'spki'};\n      const privateKeyEncoding = {format: 'der', type: 'pkcs8'};\n      // if no seed provided, generate a random key\n      if(!('seed' in options)) {\n        const generateKeyPairAsync = promisify(generateKeyPair);\n        const {publicKey, privateKey} = await generateKeyPairAsync('ed25519', {\n          publicKeyEncoding, privateKeyEncoding\n        });\n        const publicKeyBytes = publicKeyFromAsn1(\n          asn1.fromDer(new ByteBuffer(publicKey)));\n        const {privateKeyBytes} = privateKeyFromAsn1(\n          asn1.fromDer(new ByteBuffer(privateKey)));\n\n        return new Ed25519KeyPair({\n          publicKeyBase58: bs58.encode(publicKeyBytes),\n          // private key is the 32 byte private key + 32 byte public key\n          privateKeyBase58: bs58.encode(Buffer.concat(\n            [privateKeyBytes, publicKeyBytes])),\n          ...options\n        });\n      }\n      // create a key from the provided seed\n      const {seed} = options;\n      let seedBytes;\n      if(seed instanceof Uint8Array || Buffer.isBuffer(seed)) {\n        seedBytes = Buffer.from(seed);\n      }\n      if(!(Buffer.isBuffer(seedBytes) && seedBytes.length === 32)) {\n        throw new TypeError('`seed` must be a 32 byte Buffer or Uint8Array.');\n      }\n      const _privateKey = require('./ed25519PrivateKeyNode12');\n\n      // create a node private key\n      const privateKey = _privateKey.create({seedBytes});\n\n      // create a node public key from the private key\n      const publicKey = createPublicKey(privateKey);\n\n      // export the keys and extract key bytes from the exported DERs\n      const publicKeyBytes = publicKeyFromAsn1(\n        asn1.fromDer(new ByteBuffer(publicKey.export(publicKeyEncoding))));\n      const {privateKeyBytes} = privateKeyFromAsn1(\n        asn1.fromDer(new ByteBuffer(privateKey.export(privateKeyEncoding))));\n\n      return new Ed25519KeyPair({\n        publicKeyBase58: bs58.encode(publicKeyBytes),\n        // private key is the 32 byte private key + 32 byte public key\n        privateKeyBase58: bs58.encode(Buffer.concat(\n          [privateKeyBytes, publicKeyBytes])),\n        ...options\n      });\n    }\n    if(env.nodejs) {\n      // TODO: use native node crypto api once it's available\n      const sodium = require('sodium-native');\n      const bs58 = require('bs58');\n      const publicKey = new Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n      const privateKey = new Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n      if('seed' in options) {\n        sodium.crypto_sign_seed_keypair(publicKey, privateKey, options.seed);\n      } else {\n        sodium.crypto_sign_keypair(publicKey, privateKey);\n      }\n      return new Ed25519KeyPair({\n        publicKeyBase58: bs58.encode(publicKey),\n        privateKeyBase58: bs58.encode(privateKey),\n        ...options\n      });\n    }\n\n    const generateOptions = {};\n    if('seed' in options) {\n      generateOptions.seed = options.seed;\n    }\n    const {publicKey, privateKey} = ed25519.generateKeyPair(generateOptions);\n    return new Ed25519KeyPair({\n      publicKeyBase58: base58.encode(publicKey),\n      privateKeyBase58: base58.encode(privateKey),\n      ...options\n    });\n  }\n  /**\n   * Creates an Ed25519 Key Pair from an existing private key.\n   * @example\n   * > const options = {\n   *   privateKeyBase58: privateKey\n   * };\n   * > const key = await Ed25519KeyPair.from(options);\n   * > key\n   * Ed25519KeyPair { ...\n   * @param {Object} options - Contains a private key.\n   * @param {Object} [options.privateKey] - A private key object.\n   * @param {string} [options.privateKeyBase58] - A Base58\n   * Private key string.\n   *\n   * @returns {Ed25519KeyPair} An Ed25519 Key Pair.\n   */\n  static async from(options) {\n    const privateKeyBase58 = options.privateKeyBase58 ||\n      // legacy privateDidDoc format\n      (options.privateKey && options.privateKey.privateKeyBase58);\n    const keyPair = new Ed25519KeyPair({\n      privateKeyBase58,\n      type: options.type || options.keyType, // Todo: deprecate keyType usage\n      ...options\n    });\n\n    return keyPair;\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Returns a signer object for use with\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   * @example\n   * > const signer = keyPair.signer();\n   * > signer\n   * { sign: [AsyncFunction: sign] }\n   * > signer.sign({data});\n   *\n   * @returns {{sign: Function}} A signer for the json-ld block.\n   */\n  /* eslint-enable */\n  signer() {\n    return ed25519SignerFactory(this);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Returns a verifier object for use with\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   * @example\n   * > const verifier = keyPair.verifier();\n   * > verifier\n   * { verify: [AsyncFunction: verify] }\n   * > verifier.verify(key);\n   *\n   * @returns {{verify: Function}} Used to verify jsonld-signatures.\n   */\n  /* eslint-enable */\n  verifier() {\n    return ed25519VerifierFactory(this);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Adds a public key base to a public key node.\n   * @example\n   * > keyPair.addEncodedPublicKey({});\n   * { publicKeyBase58: 'GycSSui454dpYRKiFdsQ5uaE8Gy3ac6dSMPcAoQsk8yq' }\n   * @param {Object} publicKeyNode - The public key node in a jsonld-signature.\n   * @param {string} publicKeyNode.publicKeyBase58 - Base58 Public Key for\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   *\n   * @returns {{verify: Function}} A PublicKeyNode in a block.\n   */\n  /* eslint-enable */\n  addEncodedPublicKey(publicKeyNode) {\n    publicKeyNode.publicKeyBase58 = this.publicKeyBase58;\n    return publicKeyNode;\n  }\n\n  /**\n   * Adds an encrypted private key to the KeyPair.\n   * @param {Object} keyNode - A plain object.\n   *\n   * @return {Object} The keyNode with an encrypted private key attached.\n   */\n  async addEncryptedPrivateKey(keyNode) {\n    if(this.passphrase !== null) {\n      keyNode.privateKeyJwe = await this.encrypt(\n        {privateKeyBase58: this.privateKeyBase58},\n        this.passphrase\n      );\n    } else {\n      // no passphrase, do not encrypt private key\n      keyNode.privateKeyBase58 = this.privateKeyBase58;\n    }\n    return keyNode;\n  }\n\n  /**\n   * Produces a 32-byte encrypted key.\n   * @example\n   * > const encryptedContent = await edKeyPair\n   *   .encrypt(privateKey, 'Test1244!');\n   * @param {string} privateKey - The base58 private key.\n   * @param {string} password - The password.\n   *\n   * @returns {Promise<JWE>} Produces JSON Web encrypted content.\n   * @see [JWE]{@link ./index.md#JWE}\n   */\n  async encrypt(privateKey, password) {\n    const keySize = 32;\n    const salt = forge.random.getBytesSync(32);\n    const iterations = 4096;\n    const key = await LDKeyPair.pbkdf2(password, salt, iterations, keySize);\n\n    const jweHeader = {\n      alg: 'PBES2-A128GCMKW',\n      enc: 'A128GCMKW',\n      jwk: {\n        kty: 'PBKDF2',\n        s: base64url.encode(salt),\n        c: iterations\n      }\n    };\n\n    // FIXME: this probably needs to be cleaned up/made more standard\n\n    const iv = forge.random.getBytesSync(12);\n    const cipher = forge.cipher.createCipher('AES-GCM', key);\n    cipher.start({iv});\n    cipher.update(forge.util.createBuffer(JSON.stringify(privateKey)));\n    cipher.finish();\n    const encrypted = cipher.output.getBytes();\n    const tag = cipher.mode.tag.getBytes();\n\n    const jwe = {\n      unprotected: jweHeader,\n      iv: base64url.encode(iv),\n      ciphertext: base64url.encode(encrypted),\n      tag: base64url.encode(tag)\n    };\n\n    return jwe;\n  }\n\n  /**\n   * Decrypts jwe content to a privateKey.\n   * @param {JWE} jwe - Encrypted content from a block.\n   * @param {string} password - Password for the key used to sign the content.\n   *\n   * @returns {Object} A Base58 private key.\n   * @see [JWE]{@link ./index.md#JWE}\n   */\n  async decrypt(jwe, password) {\n    // FIXME: check header, implement according to JWE standard\n    const keySize = 32;\n    const {c: iterations} = jwe.unprotected.jwk;\n    let {s: salt} = jwe.unprotected.jwk;\n    salt = base64url.encode(salt);\n    const key = await LDKeyPair.pbkdf2(password, salt, iterations, keySize);\n\n    const iv = base64url.encode(jwe.iv);\n    const tag = base64url.encode(jwe.tag);\n    const decipher = forge.cipher.createDecipher('AES-GCM', key);\n    decipher.start({iv, tag});\n    decipher.update(base64url.encode(jwe.ciphertext));\n    const pass = decipher.finish();\n    if(!pass) {\n      throw new Error('Invalid password.');\n    }\n\n    const privateKey = JSON.parse(decipher.output.getBytes());\n    return privateKey;\n  }\n\n  /**\n   * Generates and returns a multiformats encoded\n   * ed25519 public key fingerprint (for use with cryptonyms, for example).\n   * @see https://github.com/multiformats/multicodec\n   *\n   * @param {string} publicKeyBase58 - The base58 encoded public key material.\n   *\n   * @returns {string} The fingerprint.\n   */\n  static fingerprintFromPublicKey({publicKeyBase58}) {\n    // ed25519 cryptonyms are multicodec encoded values, specifically:\n    // (multicodec ed25519-pub 0xed01 + key bytes)\n    const pubkeyBytes = util.base58Decode({\n      decode: base58.decode,\n      keyMaterial: publicKeyBase58,\n      type: 'public'\n    });\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    buffer[0] = 0xed;\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${base58.encode(buffer)}`;\n  }\n\n  /**\n   * Generates and returns a multiformats encoded\n   * ed25519 public key fingerprint (for use with cryptonyms, for example).\n   * @see https://github.com/multiformats/multicodec\n   *\n   * @returns {string} The fingerprint.\n   */\n  fingerprint() {\n    const {publicKeyBase58} = this;\n    return Ed25519KeyPair.fingerprintFromPublicKey({publicKeyBase58});\n  }\n\n  /**\n   * Tests whether the fingerprint was\n   * generated from a given key pair.\n   * @example\n   * > edKeyPair.verifyFingerprint('z2S2Q6MkaFJewa');\n   * {valid: true};\n   * @param {string} fingerprint - A Base58 public key.\n   *\n   * @returns {Object} An object indicating valid is true or false.\n   */\n  verifyFingerprint(fingerprint) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if(!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = util.base58Decode({\n        decode: base58.decode,\n        keyMaterial: fingerprint.slice(1),\n        type: `fingerprint's`\n      });\n    } catch(e) {\n      return {error: e, valid: false};\n    }\n    let publicKeyBuffer;\n    try {\n      publicKeyBuffer = util.base58Decode({\n        decode: base58.decode,\n        keyMaterial: this.publicKeyBase58,\n        type: 'public'\n      });\n    } catch(e) {\n      return {error: e, valid: false};\n    }\n\n    // validate the first two multicodec bytes 0xed01\n    const valid = fingerprintBuffer.slice(0, 2).toString('hex') === 'ed01' &&\n      publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if(!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false\n      };\n    }\n    return {valid};\n  }\n}\n\n/**\n * @ignore\n * Returns an object with an async sign function.\n * The sign function is bound to the KeyPair\n * and then returned by the KeyPair's signer method.\n * @param {Ed25519KeyPair} key - An ED25519KeyPair.\n * @example\n * > const mySigner = ed25519SignerFactory(edKeyPair);\n * > await mySigner.sign({data})\n *\n * @returns {{sign: Function}} An object with an async function sign\n * using the private key passed in.\n */\nfunction ed25519SignerFactory(key) {\n  if(!key.privateKeyBase58) {\n    return {\n      async sign() {\n        throw new Error('No private key to sign with.');\n      }\n    };\n  }\n\n  if(env.nodejs && require('semver').gte(process.version, '12.0.0')) {\n    const bs58 = require('bs58');\n    const privateKeyBytes = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.privateKeyBase58,\n      type: 'private'\n    });\n\n    const _privateKey = require('./ed25519PrivateKeyNode12');\n    // create a Node private key\n    const privateKey = _privateKey.create({privateKeyBytes});\n    const {sign} = require('crypto');\n\n    return {\n      async sign({data}) {\n        const signature = sign(\n          null, Buffer.from(data.buffer, data.byteOffset, data.length),\n          privateKey);\n        return signature;\n      }\n    };\n  }\n  if(env.nodejs) {\n    const sodium = require('sodium-native');\n    const bs58 = require('bs58');\n    const privateKey = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.privateKeyBase58,\n      type: 'private'\n    });\n    return {\n      async sign({data}) {\n        const signature = Buffer.alloc(sodium.crypto_sign_BYTES);\n        await sodium.crypto_sign_detached(\n          signature,\n          Buffer.from(data.buffer, data.byteOffset, data.length),\n          privateKey);\n        return signature;\n      }\n    };\n  }\n\n  // browser implementation\n  const privateKey = util.base58Decode({\n    decode: base58.decode,\n    keyMaterial: key.privateKeyBase58,\n    type: 'private'\n  });\n  return {\n    async sign({data}) {\n      return ed25519.sign({message: data, privateKey});\n    }\n  };\n}\n\n/**\n * @ignore\n * Returns an object with an async verify function.\n * The verify function is bound to the KeyPair\n * and then returned by the KeyPair's verifier method.\n * @param {Ed25519KeyPair} key - An Ed25519KeyPair.\n * @example\n * > const myVerifier = ed25519Verifier(edKeyPair);\n * > await myVerifier.verify({data, signature});\n *\n * @returns {{verify: Function}} An async verifier specific\n * to the key passed in.\n */\nfunction ed25519VerifierFactory(key) {\n  if(env.nodejs && require('semver').gte(process.version, '12.0.0')) {\n    const bs58 = require('bs58');\n    const publicKeyBytes = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.publicKeyBase58,\n      type: 'public'\n    });\n    const _publicKey = require('./ed25519PublicKeyNode12');\n    // create a Node public key\n    const publicKey = _publicKey.create({publicKeyBytes});\n    const {verify} = require('crypto');\n    return {\n      async verify({data, signature}) {\n        return verify(\n          null, Buffer.from(data.buffer, data.byteOffset, data.length),\n          publicKey, signature);\n      }\n    };\n  }\n  if(env.nodejs) {\n    const sodium = require('sodium-native');\n    const bs58 = require('bs58');\n    const publicKey = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.publicKeyBase58,\n      type: 'public'\n    });\n    return {\n      async verify({data, signature}) {\n        return sodium.crypto_sign_verify_detached(\n          Buffer.from(signature.buffer, signature.byteOffset, signature.length),\n          Buffer.from(data.buffer, data.byteOffset, data.length),\n          publicKey);\n      }\n    };\n  }\n\n  // browser implementation\n  const publicKey = util.base58Decode({\n    decode: base58.decode,\n    keyMaterial: key.publicKeyBase58,\n    type: 'public'\n  });\n  return {\n    async verify({data, signature}) {\n      return ed25519.verify({message: data, signature, publicKey});\n    }\n  };\n}\n\nmodule.exports = Ed25519KeyPair;\n"]},"metadata":{},"sourceType":"script"}