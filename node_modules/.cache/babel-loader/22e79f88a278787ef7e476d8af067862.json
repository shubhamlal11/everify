{"ast":null,"code":"/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst ControllerProofPurpose = require('./ControllerProofPurpose');\n\nmodule.exports = class AuthenticationProofPurpose extends ControllerProofPurpose {\n  constructor() {\n    let {\n      term = 'authentication',\n      controller,\n      challenge,\n      date,\n      domain,\n      maxTimestampDelta = Infinity\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      term,\n      controller,\n      date,\n      maxTimestampDelta\n    });\n\n    if (typeof challenge !== 'string') {\n      throw new TypeError('\"challenge\" must be a string.');\n    }\n\n    if (domain !== undefined && typeof domain !== 'string') {\n      throw new TypeError('\"domain\" must be a string.');\n    }\n\n    this.challenge = challenge;\n    this.domain = domain;\n  }\n\n  async validate(proof, _ref) {\n    let {\n      verificationMethod,\n      documentLoader,\n      expansionMap\n    } = _ref;\n\n    try {\n      // check challenge\n      if (proof.challenge !== this.challenge) {\n        throw new Error('The challenge is not as expected; ' + `challenge=\"${proof.challenge}\", expected=\"${this.challenge}\"`);\n      } // check domain\n\n\n      if (this.domain !== undefined && proof.domain !== this.domain) {\n        throw new Error('The domain is not as expected; ' + `domain=\"${proof.domain}\", expected=\"${this.domain}\"`);\n      }\n\n      return super.validate(proof, {\n        verificationMethod,\n        documentLoader,\n        expansionMap\n      });\n    } catch (error) {\n      return {\n        valid: false,\n        error\n      };\n    }\n  }\n\n  async update(proof, _ref2) {\n    let {\n      document,\n      suite,\n      documentLoader,\n      expansionMap\n    } = _ref2;\n    proof = await super.update(proof, {\n      document,\n      suite,\n      documentLoader,\n      expansionMap\n    });\n    proof.challenge = this.challenge;\n\n    if (this.domain !== undefined) {\n      proof.domain = this.domain;\n    }\n\n    return proof;\n  }\n\n};","map":{"version":3,"sources":["/Users/shubhamlal/Desktop/verification/node_modules/jsonld-signatures/lib/purposes/AuthenticationProofPurpose.js"],"names":["ControllerProofPurpose","require","module","exports","AuthenticationProofPurpose","constructor","term","controller","challenge","date","domain","maxTimestampDelta","Infinity","TypeError","undefined","validate","proof","verificationMethod","documentLoader","expansionMap","Error","error","valid","update","document","suite"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,0BAAD,CAAtC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,0BAAN,SACfJ,sBADe,CACQ;AACvBK,EAAAA,WAAW,GAEoD;AAAA,QAFnD;AACVC,MAAAA,IAAI,GAAG,gBADG;AACeC,MAAAA,UADf;AAEVC,MAAAA,SAFU;AAECC,MAAAA,IAFD;AAEOC,MAAAA,MAFP;AAEeC,MAAAA,iBAAiB,GAAGC;AAFnC,KAEmD,uEAAJ,EAAI;AAC7D,UAAM;AAACN,MAAAA,IAAD;AAAOC,MAAAA,UAAP;AAAmBE,MAAAA,IAAnB;AAAyBE,MAAAA;AAAzB,KAAN;;AACA,QAAG,OAAOH,SAAP,KAAqB,QAAxB,EAAkC;AAChC,YAAM,IAAIK,SAAJ,CAAc,+BAAd,CAAN;AACD;;AACD,QAAGH,MAAM,KAAKI,SAAX,IAAwB,OAAOJ,MAAP,KAAkB,QAA7C,EAAuD;AACrD,YAAM,IAAIG,SAAJ,CAAc,4BAAd,CAAN;AACD;;AACD,SAAKL,SAAL,GAAiBA,SAAjB;AACA,SAAKE,MAAL,GAAcA,MAAd;AACD;;AAEa,QAARK,QAAQ,CAACC,KAAD,QAA4D;AAAA,QAApD;AAACC,MAAAA,kBAAD;AAAqBC,MAAAA,cAArB;AAAqCC,MAAAA;AAArC,KAAoD;;AACxE,QAAI;AACF;AACA,UAAGH,KAAK,CAACR,SAAN,KAAoB,KAAKA,SAA5B,EAAuC;AACrC,cAAM,IAAIY,KAAJ,CAAU,uCACb,cAAaJ,KAAK,CAACR,SAAU,gBAAe,KAAKA,SAAU,GADxD,CAAN;AAED,OALC,CAOF;;;AACA,UAAG,KAAKE,MAAL,KAAgBI,SAAhB,IAA6BE,KAAK,CAACN,MAAN,KAAiB,KAAKA,MAAtD,EAA8D;AAC5D,cAAM,IAAIU,KAAJ,CAAU,oCACb,WAAUJ,KAAK,CAACN,MAAO,gBAAe,KAAKA,MAAO,GAD/C,CAAN;AAED;;AAED,aAAO,MAAMK,QAAN,CACLC,KADK,EACE;AAACC,QAAAA,kBAAD;AAAqBC,QAAAA,cAArB;AAAqCC,QAAAA;AAArC,OADF,CAAP;AAED,KAfD,CAeE,OAAME,KAAN,EAAa;AACb,aAAO;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeD,QAAAA;AAAf,OAAP;AACD;AACF;;AAEW,QAANE,MAAM,CAACP,KAAD,SAAyD;AAAA,QAAjD;AAACQ,MAAAA,QAAD;AAAWC,MAAAA,KAAX;AAAkBP,MAAAA,cAAlB;AAAkCC,MAAAA;AAAlC,KAAiD;AACnEH,IAAAA,KAAK,GAAG,MAAM,MAAMO,MAAN,CACZP,KADY,EACL;AAACQ,MAAAA,QAAD;AAAWC,MAAAA,KAAX;AAAkBP,MAAAA,cAAlB;AAAkCC,MAAAA;AAAlC,KADK,CAAd;AAEAH,IAAAA,KAAK,CAACR,SAAN,GAAkB,KAAKA,SAAvB;;AACA,QAAG,KAAKE,MAAL,KAAgBI,SAAnB,EAA8B;AAC5BE,MAAAA,KAAK,CAACN,MAAN,GAAe,KAAKA,MAApB;AACD;;AACD,WAAOM,KAAP;AACD;;AA5CsB,CADzB","sourcesContent":["/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst ControllerProofPurpose = require('./ControllerProofPurpose');\n\nmodule.exports = class AuthenticationProofPurpose extends\n  ControllerProofPurpose {\n  constructor({\n    term = 'authentication', controller,\n    challenge, date, domain, maxTimestampDelta = Infinity} = {}) {\n    super({term, controller, date, maxTimestampDelta});\n    if(typeof challenge !== 'string') {\n      throw new TypeError('\"challenge\" must be a string.');\n    }\n    if(domain !== undefined && typeof domain !== 'string') {\n      throw new TypeError('\"domain\" must be a string.');\n    }\n    this.challenge = challenge;\n    this.domain = domain;\n  }\n\n  async validate(proof, {verificationMethod, documentLoader, expansionMap}) {\n    try {\n      // check challenge\n      if(proof.challenge !== this.challenge) {\n        throw new Error('The challenge is not as expected; ' +\n          `challenge=\"${proof.challenge}\", expected=\"${this.challenge}\"`);\n      }\n\n      // check domain\n      if(this.domain !== undefined && proof.domain !== this.domain) {\n        throw new Error('The domain is not as expected; ' +\n          `domain=\"${proof.domain}\", expected=\"${this.domain}\"`);\n      }\n\n      return super.validate(\n        proof, {verificationMethod, documentLoader, expansionMap});\n    } catch(error) {\n      return {valid: false, error};\n    }\n  }\n\n  async update(proof, {document, suite, documentLoader, expansionMap}) {\n    proof = await super.update(\n      proof, {document, suite, documentLoader, expansionMap});\n    proof.challenge = this.challenge;\n    if(this.domain !== undefined) {\n      proof.domain = this.domain;\n    }\n    return proof;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}