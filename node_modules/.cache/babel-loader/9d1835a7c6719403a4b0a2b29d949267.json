{"ast":null,"code":"'use strict';\n\nconst {\n  inspect\n} = require('util');\n\nclass NonError extends Error {\n  constructor(message) {\n    super(inspect(message));\n    this.name = 'NonError';\n    Error.captureStackTrace(this, NonError);\n  }\n\n}\n\nconst commonProperties = ['name', 'message', 'stack', 'code'];\n\nconst destroyCircular = (from, seen, to_) => {\n  const to = to_ || (Array.isArray(from) ? [] : {});\n  seen.push(from);\n\n  for (const [key, value] of Object.entries(from)) {\n    if (typeof value === 'function') {\n      continue;\n    }\n\n    if (!value || typeof value !== 'object') {\n      to[key] = value;\n      continue;\n    }\n\n    if (!seen.includes(from[key])) {\n      to[key] = destroyCircular(from[key], seen.slice());\n      continue;\n    }\n\n    to[key] = '[Circular]';\n  }\n\n  for (const property of commonProperties) {\n    if (typeof from[property] === 'string') {\n      to[property] = from[property];\n    }\n  }\n\n  return to;\n};\n\nconst serializeError = value => {\n  if (typeof value === 'object' && value !== null) {\n    return destroyCircular(value, []);\n  } // People sometimes throw things besides Error objects…\n\n\n  if (typeof value === 'function') {\n    // `JSON.stringify()` discards functions. We do too, unless a function is thrown directly.\n    return `[Function: ${value.name || 'anonymous'}]`;\n  }\n\n  return value;\n};\n\nconst deserializeError = value => {\n  if (value instanceof Error) {\n    return value;\n  }\n\n  if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n    const newError = new Error();\n    destroyCircular(value, [], newError);\n    return newError;\n  }\n\n  return new NonError(value);\n};\n\nmodule.exports = {\n  serializeError,\n  deserializeError\n};","map":{"version":3,"sources":["/Users/shubhamlal/Desktop/verification/node_modules/serialize-error/index.js"],"names":["inspect","require","NonError","Error","constructor","message","name","captureStackTrace","commonProperties","destroyCircular","from","seen","to_","to","Array","isArray","push","key","value","Object","entries","includes","slice","property","serializeError","deserializeError","newError","module","exports"],"mappings":"AAAA;;AACA,MAAM;AAACA,EAAAA;AAAD,IAAYC,OAAO,CAAC,MAAD,CAAzB;;AAEA,MAAMC,QAAN,SAAuBC,KAAvB,CAA6B;AAC5BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB,UAAML,OAAO,CAACK,OAAD,CAAb;AACA,SAAKC,IAAL,GAAY,UAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8BL,QAA9B;AACA;;AAL2B;;AAQ7B,MAAMM,gBAAgB,GAAG,CACxB,MADwB,EAExB,SAFwB,EAGxB,OAHwB,EAIxB,MAJwB,CAAzB;;AAOA,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,GAAb,KAAqB;AAC5C,QAAMC,EAAE,GAAGD,GAAG,KAAKE,KAAK,CAACC,OAAN,CAAcL,IAAd,IAAsB,EAAtB,GAA2B,EAAhC,CAAd;AAEAC,EAAAA,IAAI,CAACK,IAAL,CAAUN,IAAV;;AAEA,OAAK,MAAM,CAACO,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeV,IAAf,CAA3B,EAAiD;AAChD,QAAI,OAAOQ,KAAP,KAAiB,UAArB,EAAiC;AAChC;AACA;;AAED,QAAI,CAACA,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;AACxCL,MAAAA,EAAE,CAACI,GAAD,CAAF,GAAUC,KAAV;AACA;AACA;;AAED,QAAI,CAACP,IAAI,CAACU,QAAL,CAAcX,IAAI,CAACO,GAAD,CAAlB,CAAL,EAA+B;AAC9BJ,MAAAA,EAAE,CAACI,GAAD,CAAF,GAAUR,eAAe,CAACC,IAAI,CAACO,GAAD,CAAL,EAAYN,IAAI,CAACW,KAAL,EAAZ,CAAzB;AACA;AACA;;AAEDT,IAAAA,EAAE,CAACI,GAAD,CAAF,GAAU,YAAV;AACA;;AAED,OAAK,MAAMM,QAAX,IAAuBf,gBAAvB,EAAyC;AACxC,QAAI,OAAOE,IAAI,CAACa,QAAD,CAAX,KAA0B,QAA9B,EAAwC;AACvCV,MAAAA,EAAE,CAACU,QAAD,CAAF,GAAeb,IAAI,CAACa,QAAD,CAAnB;AACA;AACD;;AAED,SAAOV,EAAP;AACA,CA9BD;;AAgCA,MAAMW,cAAc,GAAGN,KAAK,IAAI;AAC/B,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAChD,WAAOT,eAAe,CAACS,KAAD,EAAQ,EAAR,CAAtB;AACA,GAH8B,CAK/B;;;AACA,MAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAChC;AACA,WAAQ,cAAcA,KAAK,CAACZ,IAAN,IAAc,WAAa,GAAjD;AACA;;AAED,SAAOY,KAAP;AACA,CAZD;;AAcA,MAAMO,gBAAgB,GAAGP,KAAK,IAAI;AACjC,MAAIA,KAAK,YAAYf,KAArB,EAA4B;AAC3B,WAAOe,KAAP;AACA;;AAED,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAvC,IAA+C,CAACJ,KAAK,CAACC,OAAN,CAAcG,KAAd,CAApD,EAA0E;AACzE,UAAMQ,QAAQ,GAAG,IAAIvB,KAAJ,EAAjB;AACAM,IAAAA,eAAe,CAACS,KAAD,EAAQ,EAAR,EAAYQ,QAAZ,CAAf;AACA,WAAOA,QAAP;AACA;;AAED,SAAO,IAAIxB,QAAJ,CAAagB,KAAb,CAAP;AACA,CAZD;;AAcAS,MAAM,CAACC,OAAP,GAAiB;AAChBJ,EAAAA,cADgB;AAEhBC,EAAAA;AAFgB,CAAjB","sourcesContent":["'use strict';\nconst {inspect} = require('util');\n\nclass NonError extends Error {\n\tconstructor(message) {\n\t\tsuper(inspect(message));\n\t\tthis.name = 'NonError';\n\t\tError.captureStackTrace(this, NonError);\n\t}\n}\n\nconst commonProperties = [\n\t'name',\n\t'message',\n\t'stack',\n\t'code'\n];\n\nconst destroyCircular = (from, seen, to_) => {\n\tconst to = to_ || (Array.isArray(from) ? [] : {});\n\n\tseen.push(from);\n\n\tfor (const [key, value] of Object.entries(from)) {\n\t\tif (typeof value === 'function') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!value || typeof value !== 'object') {\n\t\t\tto[key] = value;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!seen.includes(from[key])) {\n\t\t\tto[key] = destroyCircular(from[key], seen.slice());\n\t\t\tcontinue;\n\t\t}\n\n\t\tto[key] = '[Circular]';\n\t}\n\n\tfor (const property of commonProperties) {\n\t\tif (typeof from[property] === 'string') {\n\t\t\tto[property] = from[property];\n\t\t}\n\t}\n\n\treturn to;\n};\n\nconst serializeError = value => {\n\tif (typeof value === 'object' && value !== null) {\n\t\treturn destroyCircular(value, []);\n\t}\n\n\t// People sometimes throw things besides Error objects…\n\tif (typeof value === 'function') {\n\t\t// `JSON.stringify()` discards functions. We do too, unless a function is thrown directly.\n\t\treturn `[Function: ${(value.name || 'anonymous')}]`;\n\t}\n\n\treturn value;\n};\n\nconst deserializeError = value => {\n\tif (value instanceof Error) {\n\t\treturn value;\n\t}\n\n\tif (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n\t\tconst newError = new Error();\n\t\tdestroyCircular(value, [], newError);\n\t\treturn newError;\n\t}\n\n\treturn new NonError(value);\n};\n\nmodule.exports = {\n\tserializeError,\n\tdeserializeError\n};\n"]},"metadata":{},"sourceType":"script"}