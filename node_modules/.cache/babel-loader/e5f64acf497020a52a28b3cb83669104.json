{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadWasmInstance = void 0;\n/**\n * Webpack trys to parse .wasm file even if file-loader is used. Using extension\n * *.wasm.bin as a workaround.\n * See https://github.com/webpack/webpack/issues/6725.\n * To facilitate streaming compilation by the browser, *.wasm.bin files\n * should be served as MIME type 'application/wasm'.\n */\n// import wasmBinaryFile from './zbar.wasm';\n\nconst zbar_wasm_bin_1 = __importDefault(require(\"./zbar.wasm.bin\"));\n\nconst zbar_1 = __importDefault(require(\"./zbar\")); // locateFile is used to override the file path to the path provided by\n// file-loader.\n\n\nconst locateFile = (file, _scriptDir) => {\n  if (file != 'zbar.wasm') {\n    console.error('Unexpected file:', file);\n  }\n\n  return zbar_wasm_bin_1.default;\n};\n\nconst loadWasmInstance = async importObj => {\n  importObj['locateFile'] = locateFile;\n  return await (0, zbar_1.default)(importObj);\n};\n\nexports.loadWasmInstance = loadWasmInstance;","map":{"version":3,"sources":["../src/load-browser.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;;AAMG;AACH;;AACA,MAAA,eAAA,GAAA,eAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AAEA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,C,CAEA;AACA;;;AACA,MAAM,UAAU,GAAG,CAAC,IAAD,EAAe,UAAf,KAAqC;AACtD,MAAI,IAAI,IAAI,WAAZ,EAAyB;AACvB,IAAA,OAAO,CAAC,KAAR,CAAc,kBAAd,EAAkC,IAAlC;AACD;;AACD,SAAO,eAAA,CAAA,OAAP;AACD,CALD;;AAOO,MAAM,gBAAgB,GAAG,MAC9B,SAD8B,IAEE;AAChC,EAAA,SAAS,CAAC,YAAD,CAAT,GAA0B,UAA1B;AACA,SAAO,MAAM,CAAA,GAAA,MAAA,CAAA,OAAA,EAAY,SAAZ,CAAb;AACD,CALM;;AAAM,OAAA,CAAA,gBAAA,GAAgB,gBAAhB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadWasmInstance = void 0;\n/**\n * Webpack trys to parse .wasm file even if file-loader is used. Using extension\n * *.wasm.bin as a workaround.\n * See https://github.com/webpack/webpack/issues/6725.\n * To facilitate streaming compilation by the browser, *.wasm.bin files\n * should be served as MIME type 'application/wasm'.\n */\n// import wasmBinaryFile from './zbar.wasm';\nconst zbar_wasm_bin_1 = __importDefault(require(\"./zbar.wasm.bin\"));\nconst zbar_1 = __importDefault(require(\"./zbar\"));\n// locateFile is used to override the file path to the path provided by\n// file-loader.\nconst locateFile = (file, _scriptDir) => {\n    if (file != 'zbar.wasm') {\n        console.error('Unexpected file:', file);\n    }\n    return zbar_wasm_bin_1.default;\n};\nconst loadWasmInstance = async (importObj) => {\n    importObj['locateFile'] = locateFile;\n    return await (0, zbar_1.default)(importObj);\n};\nexports.loadWasmInstance = loadWasmInstance;\n//# sourceMappingURL=load-browser.js.map"]},"metadata":{},"sourceType":"script"}