{"ast":null,"code":"/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst ControllerProofPurpose = require('./ControllerProofPurpose');\n\nmodule.exports = class PublicKeyProofPurpose extends ControllerProofPurpose {\n  constructor() {\n    let {\n      controller,\n      date,\n      maxTimestampDelta = Infinity\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      term: 'publicKey',\n      controller,\n      date,\n      maxTimestampDelta\n    });\n  }\n\n  async update(proof) {\n    // do not add `term` to proof\n    return proof;\n  }\n\n  async match(proof) {\n    // `proofPurpose` must not be present in the proof to match as this\n    // proof purpose is a legacy, non-descript purpose for signing\n    return proof.proofPurpose === undefined;\n  }\n\n};","map":{"version":3,"sources":["/Users/shubhamlal/Desktop/verification/node_modules/jsonld-signatures/lib/purposes/PublicKeyProofPurpose.js"],"names":["ControllerProofPurpose","require","module","exports","PublicKeyProofPurpose","constructor","controller","date","maxTimestampDelta","Infinity","term","update","proof","match","proofPurpose","undefined"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,0BAAD,CAAtC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,qBAAN,SAAoCJ,sBAApC,CAA2D;AAC1EK,EAAAA,WAAW,GAAwD;AAAA,QAAvD;AAACC,MAAAA,UAAD;AAAaC,MAAAA,IAAb;AAAmBC,MAAAA,iBAAiB,GAAGC;AAAvC,KAAuD,uEAAJ,EAAI;AACjE,UAAM;AAACC,MAAAA,IAAI,EAAE,WAAP;AAAoBJ,MAAAA,UAApB;AAAgCC,MAAAA,IAAhC;AAAsCC,MAAAA;AAAtC,KAAN;AACD;;AAEW,QAANG,MAAM,CAACC,KAAD,EAAQ;AAClB;AACA,WAAOA,KAAP;AACD;;AAEU,QAALC,KAAK,CAACD,KAAD,EAAQ;AACjB;AACA;AACA,WAAOA,KAAK,CAACE,YAAN,KAAuBC,SAA9B;AACD;;AAdyE,CAA5E","sourcesContent":["/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst ControllerProofPurpose = require('./ControllerProofPurpose');\n\nmodule.exports = class PublicKeyProofPurpose extends ControllerProofPurpose {\n  constructor({controller, date, maxTimestampDelta = Infinity} = {}) {\n    super({term: 'publicKey', controller, date, maxTimestampDelta});\n  }\n\n  async update(proof) {\n    // do not add `term` to proof\n    return proof;\n  }\n\n  async match(proof) {\n    // `proofPurpose` must not be present in the proof to match as this\n    // proof purpose is a legacy, non-descript purpose for signing\n    return proof.proofPurpose === undefined;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}