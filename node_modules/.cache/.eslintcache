[{"/Users/shubhamlal/Desktop/verification/src/index.js":"1","/Users/shubhamlal/Desktop/verification/src/reportWebVitals.js":"2","/Users/shubhamlal/Desktop/verification/src/App.js":"3","/Users/shubhamlal/Desktop/verification/src/redux/store.js":"4","/Users/shubhamlal/Desktop/verification/src/components/VerifyCertificate/index.js":"5","/Users/shubhamlal/Desktop/verification/src/redux/reducers/index.js":"6","/Users/shubhamlal/Desktop/verification/src/components/CustomButton/index.js":"7","/Users/shubhamlal/Desktop/verification/src/components/QRScanner/index.js":"8","/Users/shubhamlal/Desktop/verification/src/components/CertificateStatus/index.js":"9","/Users/shubhamlal/Desktop/verification/src/redux/reducers/events.js":"10","/Users/shubhamlal/Desktop/verification/src/constants.js":"11","/Users/shubhamlal/Desktop/verification/src/utils/utils.js":"12","/Users/shubhamlal/Desktop/verification/src/components/Loader/index.js":"13"},{"size":544,"mtime":1642481160000,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1642481160000,"results":"16","hashOfConfig":"15"},{"size":346,"mtime":1642481160000,"results":"17","hashOfConfig":"15"},{"size":734,"mtime":1642481160000,"results":"18","hashOfConfig":"15"},{"size":2695,"mtime":1643350390601,"results":"19","hashOfConfig":"15"},{"size":141,"mtime":1642481160000,"results":"20","hashOfConfig":"15"},{"size":225,"mtime":1642481160000,"results":"21","hashOfConfig":"15"},{"size":5970,"mtime":1642481160000,"results":"22","hashOfConfig":"15"},{"size":9490,"mtime":1642481160000,"results":"23","hashOfConfig":"15"},{"size":1661,"mtime":1642481160000,"results":"24","hashOfConfig":"15"},{"size":2254,"mtime":1642481160000,"results":"25","hashOfConfig":"15"},{"size":284,"mtime":1642481160000,"results":"26","hashOfConfig":"15"},{"size":249,"mtime":1642481160000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vaf346",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},"/Users/shubhamlal/Desktop/verification/src/index.js",[],"/Users/shubhamlal/Desktop/verification/src/reportWebVitals.js",[],"/Users/shubhamlal/Desktop/verification/src/App.js",[],"/Users/shubhamlal/Desktop/verification/src/redux/store.js",["60","61"],"import {createStore} from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) {\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n};\n\nconst saveState = (state) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch {\n        // ignore write errors\n    }\n};\n\nconst persistedState = loadState();\n\nexport const store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n\n","/Users/shubhamlal/Desktop/verification/src/components/VerifyCertificate/index.js",["62","63","64","65","66","67"],"import React, {useState} from \"react\";\nimport \"./index.css\";\nimport VerifyCertificateImg from \"../../assets/img/verify-certificate.png\"\nimport SampleCertificateImg from \"../../assets/img/sample_ceritificate.png\"\nimport ValidCertificateImg from \"../../assets/img/ValidCertificate.png\"\nimport InvalidCertificateImg from \"../../assets/img/InvalidCertificate.jpeg\"\nimport QRCodeImg from \"../../assets/img/qr-code.svg\"\nimport {CertificateStatus} from \"../CertificateStatus\";\nimport {CustomButton} from \"../CustomButton\";\nimport QRScanner from \"../QRScanner\";\nimport JSZip from \"jszip\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nexport const CERTIFICATE_FILE = \"certificate.json\";\n\nexport const VerifyCertificate = () => {\n    const [result, setResult] = useState(\"\");\n    const [showScanner, setShowScanner] = useState(false);\n    const handleScan = data => {\n        if (data) {\n            const zip = new JSZip();\n            zip.loadAsync(data).then((contents) => {\n                return contents.files[CERTIFICATE_FILE].async('text')\n            }).then(function (contents) {\n                setResult(contents)\n            }).catch(err => {\n                    setResult(data)\n                }\n            );\n\n        }\n    };\n    const handleError = err => {\n        console.error(err)\n    };\n    return (\n        <div className=\"container-fluid verify-certificate-wrapper\">\n            {\n                !result &&\n                <>\n                    {!showScanner &&\n                    <>\n                        <img src={VerifyCertificateImg} className=\"banner-img\" alt=\"banner-img\"/>\n                        <h3 className=\"text-center\">Verify a vaccination certificate</h3>\n                        <CustomButton className=\"green-btn\" onClick={() => setShowScanner(true)}>\n                            <span>Scan QR code</span>\n                            <img className=\"ml-3\" src={QRCodeImg} alt={\"\"}/>\n                        </CustomButton>\n                    </>}\n                    {showScanner &&\n                    <>\n                        <QRScanner onError={handleError}\n                                   onScan={handleScan}/>\n                        <CustomButton className=\"green-btn\" onClick={() => setShowScanner(false)}>BACK</CustomButton>\n                    </>\n                    }\n                </>\n            }\n            {\n                result && <CertificateStatus certificateData={result} goBack={() => {\n                    setShowScanner(false);\n                    setResult(\"\");\n                }\n                }/>\n            }\n\n\n        </div>\n    )\n};\n","/Users/shubhamlal/Desktop/verification/src/redux/reducers/index.js",[],"/Users/shubhamlal/Desktop/verification/src/components/CustomButton/index.js",[],"/Users/shubhamlal/Desktop/verification/src/components/QRScanner/index.js",[],"/Users/shubhamlal/Desktop/verification/src/components/CertificateStatus/index.js",["68","69","70"],"import React, {useEffect, useState} from \"react\";\nimport \"./index.css\";\nimport CertificateValidImg from \"../../assets/img/certificate-valid.svg\";\nimport CertificateInValidImg from \"../../assets/img/certificate-invalid.svg\";\nimport NextArrowImg from \"../../assets/img/next-arrow.svg\";\n// import LearnProcessImg from \"../../assets/img/leanr_more_small.png\";\n// import FeedbackSmallImg from \"../../assets/img/feedback-small.png\";\n// import DownloadSmallImg from \"../../assets/img/download-certificate-small.png\";\nimport config from \"../../config\";\nimport {pathOr} from \"ramda\";\nimport {CustomButton} from \"../CustomButton\";\nimport {CertificateDetailsPaths} from \"../../constants\";\nimport {useDispatch} from \"react-redux\";\nimport {addEventAction, EVENT_TYPES} from \"../../redux/reducers/events\";\nimport {useHistory} from \"react-router-dom\";\nimport axios from \"axios\";\nimport {ordinal_suffix_of} from \"../../utils/utils\";\nimport {Loader} from \"../Loader\";\n\nconst jsigs = require('jsonld-signatures');\nconst {RSAKeyPair} = require('crypto-ld');\nconst {documentLoaders} = require('jsonld');\nconst {node: documentLoader} = documentLoaders;\nconst {contexts} = require('security-context');\nconst credentialsv1 = require('../../utils/credentials.json');\nconst {vaccinationContext, vaccinationContextV2} = require('vaccination-context');\n\nconst customLoader = url => {\n    console.log(\"checking \" + url);\n    const c = {\n        \"did:india\": config.certificatePublicKey,\n        \"https://example.com/i/india\": config.certificatePublicKey,\n        \"https://w3id.org/security/v1\": contexts.get(\"https://w3id.org/security/v1\"),\n        'https://www.w3.org/2018/credentials#': credentialsv1,\n        \"https://www.w3.org/2018/credentials/v1\": credentialsv1,\n        \"https://cowin.gov.in/credentials/vaccination/v1\": vaccinationContext,\n        \"https://cowin.gov.in/credentials/vaccination/v2\": vaccinationContextV2,\n    };\n    let context = c[url];\n    if (context === undefined) {\n        context = contexts[url];\n    }\n    if (context !== undefined) {\n        return {\n            contextUrl: null,\n            documentUrl: url,\n            document: context\n        };\n    }\n    if (url.startsWith(\"{\")) {\n        return JSON.parse(url);\n    }\n    console.log(\"Fallback url lookup for document :\" + url)\n    return documentLoader()(url);\n};\n\nexport const CertificateStatus = ({certificateData, goBack}) => {\n    const [isLoading, setLoading] = useState(false);\n    const [isValid, setValid] = useState(false);\n    const [data, setData] = useState({});\n    const history = useHistory();\n\n    setTimeout(()=>{\n        try {\n            axios\n              .post(\"/divoc/api/v1/events/\", {\"date\":new Date().toISOString(), \"type\":\"verify\"})\n              .catch((e) => {\n                console.log(e);\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    }, 100)\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        setLoading(true);\n        async function verifyData() {\n            try {\n                const signedJSON = JSON.parse(certificateData);\n                const publicKey = {\n                    '@context': jsigs.SECURITY_CONTEXT_URL,\n                    id: 'did:india',\n                    type: 'RsaVerificationKey2018',\n                    controller: 'https://cowin.gov.in/',\n                    publicKeyPem: config.certificatePublicKey\n                };\n                const controller = {\n                    '@context': jsigs.SECURITY_CONTEXT_URL,\n                    id: 'https://cowin.gov.in/',\n                    publicKey: [publicKey],\n                    // this authorizes this key to be used for making assertions\n                    assertionMethod: [publicKey.id]\n                };\n                const key = new RSAKeyPair({...publicKey});\n                const {AssertionProofPurpose} = jsigs.purposes;\n                const {RsaSignature2018} = jsigs.suites;\n                const result = await jsigs.verify(signedJSON, {\n                    suite: new RsaSignature2018({key}),\n                    purpose: new AssertionProofPurpose({controller}),\n                    documentLoader: customLoader,\n                    compactProof: false\n                });\n                if (result.verified) {\n                    const revokedResponse = await checkIfRevokedCertificate(signedJSON)\n                    if (revokedResponse.response.status !== 200) {\n                        console.log('Signature verified.');\n                        setValid(true);\n                        setData(signedJSON);\n                        dispatch(addEventAction({\n                            type: EVENT_TYPES.VALID_VERIFICATION,\n                            extra: signedJSON.credentialSubject\n                        }));\n                        setLoading(false);\n                        return;\n                    }\n                }\n                dispatch(addEventAction({type: EVENT_TYPES.INVALID_VERIFICATION, extra: signedJSON}));\n                setValid(false);\n                setLoading(false);\n            } catch (e) {\n                console.log('Invalid data', e);\n                setValid(false);\n                dispatch(addEventAction({type: EVENT_TYPES.INVALID_VERIFICATION, extra: certificateData}));\n                setLoading(false);\n            }\n\n        }\n        setTimeout(() => {\n            verifyData()\n        }, 500)\n\n    }, []);\n\n    async function checkIfRevokedCertificate(data) {\n        return axios\n            .post(\"/cert/api/certificate/revoked\", data)\n            .then((res) => {\n                dispatch(addEventAction({type: EVENT_TYPES.REVOKED_CERTIFICATE, extra: certificateData}));\n                return res\n            }).catch((e) => {\n                console.log(e);\n                return e\n            });\n    }\n\n    function getCertificateStatusAsString(data) {\n        if (!data || !data[\"evidence\"]) {\n            return \"\"\n        }\n        return \"Certificate for COVID-19 Vaccination\"\n    }\n\n    function getDose(data) {\n        if (!data || !data[\"evidence\"]) {\n            return \"\"\n        }\n\n        if(parseInt(data[\"evidence\"][0][\"dose\"]) > parseInt(data[\"evidence\"][0][\"totalDoses\"])){\n            return \"Precaution\"\n        }\n        \n        return ordinal_suffix_of(data[\"evidence\"][0][\"dose\"])\n    }\n\n    return (\n        isLoading ? <Loader/> : <div className=\"certificate-status-wrapper\">\n            <img src={isValid ? CertificateValidImg : CertificateInValidImg} alt={\"\"}\n                 className=\"certificate-status-image\"/>\n            <h3 className=\"certificate-status\">\n                {\n                    isValid ? \"Certificate Successfully Verified\" : \"Certificate Invalid\"\n                }\n            </h3>\n            <br/>\n            {\n                isValid && <h5>\n                    {\n                        getCertificateStatusAsString(data)\n                    }\n                </h5>\n            }\n            {\n                isValid && <table className=\"mt-3\">\n                    {\n                        Object.keys(CertificateDetailsPaths).map((key, index) => {\n                            const context = CertificateDetailsPaths[key];\n                            const value = context.format(pathOr(\"NA\", context.path, data));\n                            const show = value !== \"NA\" || (value === \"NA\" && !context.optional)\n                            return (\n                              show && <tr key={index} style={{fontSize:\"smaller\", textAlign: \"left\"}}>\n                                    <td className=\"pr-3\" >{key.replace(\"${dose}\", getDose(data))}</td>\n                                    <td className=\"font-weight-bolder value-col\">{value}</td>\n                                </tr>\n                            )\n                        })\n                    }\n\n                </table>\n            }\n            <br/>\n            <CustomButton className=\"blue-btn m-3\" onClick={goBack}>Verify Another Certificate</CustomButton>\n           <br/>\n           {\n                !isValid && <h5>\n                    {\n                         <a href= 'https://www.cowin.gov.in'>Please visit https://www.cowin.gov.in to get your latest dose certificate</a>\n                    }\n                </h5>\n            }\n           \n            {/*<SmallInfoCards text={\"Provide Feedback\"}*/}\n            {/*                onClick={() => {*/}\n            {/*                    history.push(\"/side-effects\")*/}\n            {/*                }}*/}\n            {/*                img={FeedbackSmallImg} backgroundColor={\"#FFFBF0\"}/>*/}\n            {/*<SmallInfoCards text={\"Learn about the Vaccination process\"} img={LearnProcessImg}*/}\n            {/*               onClick={() => {*/}\n            {/*                    history.push(\"/learn\")*/}\n            {/*                }}*/}\n            {/*                backgroundColor={\"#EFF5FD\"}/>*/}\n        </div>\n    )\n};\n\nexport const SmallInfoCards = ({text, img, onClick, backgroundColor}) => (\n    <div className=\"small-info-card-wrapper mt-3 mb-3\" style={{backgroundColor: backgroundColor}}>\n        <div className=\"w-50 \">\n            <img src={img} alt={\"\"} className=\"small-card-img float-right\"/>\n        </div>\n        <div onClick={onClick}\n             className=\"w-50 d-flex flex-column align-items-start justify-content-center font-weight-bold\">\n            <span>{text}</span>\n            <img src={NextArrowImg} alt={\"\"}/>\n        </div>\n    </div>\n);\n","/Users/shubhamlal/Desktop/verification/src/redux/reducers/events.js",[],"/Users/shubhamlal/Desktop/verification/src/constants.js",["71"],"const monthNames = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\",\n    \"May\", \"Jun\", \"Jul\", \"Aug\",\n    \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n];\n\nexport function formatDate(givenDate) {\n    const dob = new Date(givenDate);\n    let day = (dob.getDate()).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false});\n    let monthName = monthNames[dob.getMonth()];\n    let year = dob.getFullYear();\n\n    return `${day}-${monthName}-${year}`;\n}\n\nexport const CertificateDetailsPaths = {\n    \"Name\": {\n        path: [\"credentialSubject\", \"name\"],\n        format: (data) => (data)\n    },\n    \"Age\": {\n        path: [\"credentialSubject\", \"age\"],\n        format: (data) => (data)\n    },\n    \"DOB\": {\n        path: [\"credentialSubject\", \"dob\"],\n        format: (data) => (data),\n        optional: true\n    },\n    \"Gender\": {\n        path: [\"credentialSubject\", \"gender\"],\n        format: (data) => (data)\n    },\n    \"Certificate ID\": {\n        path: [\"evidence\", \"0\", \"certificateId\"],\n        format: (data) => (data)\n    },\n    \"Beneficiary ID\": {\n        path: [\"credentialSubject\", \"refId\"],\n        format: (data) => (data)\n    },\n    \"Vaccine Name\": {\n        path: [\"evidence\", \"0\", \"vaccine\"],\n        format: (data) => (data)\n    },\n    \"Vaccine Type\": {\n        path: [\"evidence\", \"0\", \"prophylaxis\"],\n        format: (data) => (data),\n        optional: true\n    },\n    \"Date of ${dose} Dose\": {\n        path: [\"evidence\", \"0\", \"date\"],\n        format: (data) => (formatDate(data))\n    },\n    \"Vaccination Status\": {\n        path: [\"evidence\", \"0\"],\n        format: (data) => {\n            const dose = parseInt(data.dose)\n            const totalDoses = parseInt(data.totalDoses) || 2\n            if (dose > totalDoses) {\n               return \"Fully vaccinated and precaution dose administered\"\n            } else if (dose < totalDoses) {\n                return \"Partially Vaccinated\"\n            } else {\n                return \"Fully Vaccinated\"\n            }\n        }\n    },\n    \"Vaccination at\": {\n        path: [\"evidence\", \"0\", \"facility\", \"name\"],\n        format: (data) => (data)\n    },\n    \"Country of Vaccination\": {\n        path: [\"evidence\", \"0\", \"facility\", \"address\", \"addressCountry\"],\n        format: (data) => (data),\n        optional: true\n    }\n};\n","/Users/shubhamlal/Desktop/verification/src/utils/utils.js",["72","73","74","75","76","77"],"export function ordinal_suffix_of(i) {\n    const j = i % 10,\n        k = i % 100;\n    if (j == 1 && k != 11) {\n        return i + \"st\";\n    }\n    if (j == 2 && k != 12) {\n        return i + \"nd\";\n    }\n    if (j == 3 && k != 13) {\n        return i + \"rd\";\n    }\n    return i + \"th\";\n}","/Users/shubhamlal/Desktop/verification/src/components/Loader/index.js",["78"],"import React from \"react\";\nimport LoadingImg from \"../../assets/img/loading.gif\";\nimport \"./index.css\";\n\nexport const Loader = () => {\n    return (\n        <div className=\"loader-wrapper\">\n            <img src={LoadingImg}/>\n\n        </div>\n    )\n};",{"ruleId":"79","severity":1,"message":"80","line":16,"column":7,"nodeType":"81","messageId":"82","endLine":16,"endColumn":16},{"ruleId":"79","severity":1,"message":"83","line":25,"column":7,"nodeType":"81","messageId":"82","endLine":25,"endColumn":21},{"ruleId":"79","severity":1,"message":"84","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":28},{"ruleId":"79","severity":1,"message":"85","line":5,"column":8,"nodeType":"81","messageId":"82","endLine":5,"endColumn":27},{"ruleId":"79","severity":1,"message":"86","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":29},{"ruleId":"79","severity":1,"message":"87","line":12,"column":8,"nodeType":"81","messageId":"82","endLine":12,"endColumn":17},{"ruleId":"79","severity":1,"message":"88","line":13,"column":8,"nodeType":"81","messageId":"82","endLine":13,"endColumn":11},{"ruleId":"79","severity":1,"message":"89","line":14,"column":8,"nodeType":"81","messageId":"82","endLine":14,"endColumn":11},{"ruleId":"79","severity":1,"message":"90","line":61,"column":11,"nodeType":"81","messageId":"82","endLine":61,"endColumn":18},{"ruleId":"91","severity":1,"message":"92","line":133,"column":8,"nodeType":"93","endLine":133,"endColumn":10,"suggestions":"94"},{"ruleId":"95","severity":1,"message":"96","line":192,"column":72,"nodeType":"97","messageId":"98","endLine":192,"endColumn":81},{"ruleId":"95","severity":1,"message":"96","line":51,"column":5,"nodeType":"97","messageId":"98","endLine":51,"endColumn":27},{"ruleId":"99","severity":1,"message":"100","line":4,"column":11,"nodeType":"101","messageId":"102","endLine":4,"endColumn":13},{"ruleId":"99","severity":1,"message":"103","line":4,"column":21,"nodeType":"101","messageId":"102","endLine":4,"endColumn":23},{"ruleId":"99","severity":1,"message":"100","line":7,"column":11,"nodeType":"101","messageId":"102","endLine":7,"endColumn":13},{"ruleId":"99","severity":1,"message":"103","line":7,"column":21,"nodeType":"101","messageId":"102","endLine":7,"endColumn":23},{"ruleId":"99","severity":1,"message":"100","line":10,"column":11,"nodeType":"101","messageId":"102","endLine":10,"endColumn":13},{"ruleId":"99","severity":1,"message":"103","line":10,"column":21,"nodeType":"101","messageId":"102","endLine":10,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":8,"column":13,"nodeType":"106","endLine":8,"endColumn":36},"no-unused-vars","'saveState' is assigned a value but never used.","Identifier","unusedVar","'persistedState' is assigned a value but never used.","'SampleCertificateImg' is defined but never used.","'ValidCertificateImg' is defined but never used.","'InvalidCertificateImg' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'certificateData', 'checkIfRevokedCertificate', and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["107"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"108","fix":"109"},"Update the dependencies array to be: [certificateData, checkIfRevokedCertificate, dispatch]",{"range":"110","text":"111"},[5411,5413],"[certificateData, checkIfRevokedCertificate, dispatch]"]